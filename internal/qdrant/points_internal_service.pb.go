// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: points_internal_service.proto

package qdrant

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SyncPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string         `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"` // name of the collection
	Wait           *bool          `protobuf:"varint,2,opt,name=wait,proto3,oneof" json:"wait,omitempty"`                                    // Wait until the changes have been applied?
	Points         []*PointStruct `protobuf:"bytes,3,rep,name=points,proto3" json:"points,omitempty"`
	FromId         *PointId       `protobuf:"bytes,4,opt,name=from_id,json=fromId,proto3,oneof" json:"from_id,omitempty"` // Start of the sync range
	ToId           *PointId       `protobuf:"bytes,5,opt,name=to_id,json=toId,proto3,oneof" json:"to_id,omitempty"`       // End of the sync range
	Ordering       *WriteOrdering `protobuf:"bytes,6,opt,name=ordering,proto3,oneof" json:"ordering,omitempty"`
}

func (x *SyncPoints) Reset() {
	*x = SyncPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncPoints) ProtoMessage() {}

func (x *SyncPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncPoints.ProtoReflect.Descriptor instead.
func (*SyncPoints) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{0}
}

func (x *SyncPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *SyncPoints) GetWait() bool {
	if x != nil && x.Wait != nil {
		return *x.Wait
	}
	return false
}

func (x *SyncPoints) GetPoints() []*PointStruct {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *SyncPoints) GetFromId() *PointId {
	if x != nil {
		return x.FromId
	}
	return nil
}

func (x *SyncPoints) GetToId() *PointId {
	if x != nil {
		return x.ToId
	}
	return nil
}

func (x *SyncPoints) GetOrdering() *WriteOrdering {
	if x != nil {
		return x.Ordering
	}
	return nil
}

type SyncPointsInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncPoints *SyncPoints `protobuf:"bytes,1,opt,name=sync_points,json=syncPoints,proto3" json:"sync_points,omitempty"`
	ShardId    *uint32     `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3,oneof" json:"shard_id,omitempty"`
	ClockTag   *ClockTag   `protobuf:"bytes,3,opt,name=clock_tag,json=clockTag,proto3,oneof" json:"clock_tag,omitempty"`
}

func (x *SyncPointsInternal) Reset() {
	*x = SyncPointsInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncPointsInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncPointsInternal) ProtoMessage() {}

func (x *SyncPointsInternal) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncPointsInternal.ProtoReflect.Descriptor instead.
func (*SyncPointsInternal) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{1}
}

func (x *SyncPointsInternal) GetSyncPoints() *SyncPoints {
	if x != nil {
		return x.SyncPoints
	}
	return nil
}

func (x *SyncPointsInternal) GetShardId() uint32 {
	if x != nil && x.ShardId != nil {
		return *x.ShardId
	}
	return 0
}

func (x *SyncPointsInternal) GetClockTag() *ClockTag {
	if x != nil {
		return x.ClockTag
	}
	return nil
}

type UpsertPointsInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpsertPoints *UpsertPoints `protobuf:"bytes,1,opt,name=upsert_points,json=upsertPoints,proto3" json:"upsert_points,omitempty"`
	ShardId      *uint32       `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3,oneof" json:"shard_id,omitempty"`
	ClockTag     *ClockTag     `protobuf:"bytes,3,opt,name=clock_tag,json=clockTag,proto3,oneof" json:"clock_tag,omitempty"`
}

func (x *UpsertPointsInternal) Reset() {
	*x = UpsertPointsInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertPointsInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertPointsInternal) ProtoMessage() {}

func (x *UpsertPointsInternal) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertPointsInternal.ProtoReflect.Descriptor instead.
func (*UpsertPointsInternal) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{2}
}

func (x *UpsertPointsInternal) GetUpsertPoints() *UpsertPoints {
	if x != nil {
		return x.UpsertPoints
	}
	return nil
}

func (x *UpsertPointsInternal) GetShardId() uint32 {
	if x != nil && x.ShardId != nil {
		return *x.ShardId
	}
	return 0
}

func (x *UpsertPointsInternal) GetClockTag() *ClockTag {
	if x != nil {
		return x.ClockTag
	}
	return nil
}

type DeletePointsInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeletePoints *DeletePoints `protobuf:"bytes,1,opt,name=delete_points,json=deletePoints,proto3" json:"delete_points,omitempty"`
	ShardId      *uint32       `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3,oneof" json:"shard_id,omitempty"`
	ClockTag     *ClockTag     `protobuf:"bytes,3,opt,name=clock_tag,json=clockTag,proto3,oneof" json:"clock_tag,omitempty"`
}

func (x *DeletePointsInternal) Reset() {
	*x = DeletePointsInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePointsInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePointsInternal) ProtoMessage() {}

func (x *DeletePointsInternal) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePointsInternal.ProtoReflect.Descriptor instead.
func (*DeletePointsInternal) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{3}
}

func (x *DeletePointsInternal) GetDeletePoints() *DeletePoints {
	if x != nil {
		return x.DeletePoints
	}
	return nil
}

func (x *DeletePointsInternal) GetShardId() uint32 {
	if x != nil && x.ShardId != nil {
		return *x.ShardId
	}
	return 0
}

func (x *DeletePointsInternal) GetClockTag() *ClockTag {
	if x != nil {
		return x.ClockTag
	}
	return nil
}

type UpdateVectorsInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateVectors *UpdatePointVectors `protobuf:"bytes,1,opt,name=update_vectors,json=updateVectors,proto3" json:"update_vectors,omitempty"`
	ShardId       *uint32             `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3,oneof" json:"shard_id,omitempty"`
	ClockTag      *ClockTag           `protobuf:"bytes,3,opt,name=clock_tag,json=clockTag,proto3,oneof" json:"clock_tag,omitempty"`
}

func (x *UpdateVectorsInternal) Reset() {
	*x = UpdateVectorsInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVectorsInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVectorsInternal) ProtoMessage() {}

func (x *UpdateVectorsInternal) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVectorsInternal.ProtoReflect.Descriptor instead.
func (*UpdateVectorsInternal) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateVectorsInternal) GetUpdateVectors() *UpdatePointVectors {
	if x != nil {
		return x.UpdateVectors
	}
	return nil
}

func (x *UpdateVectorsInternal) GetShardId() uint32 {
	if x != nil && x.ShardId != nil {
		return *x.ShardId
	}
	return 0
}

func (x *UpdateVectorsInternal) GetClockTag() *ClockTag {
	if x != nil {
		return x.ClockTag
	}
	return nil
}

type DeleteVectorsInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteVectors *DeletePointVectors `protobuf:"bytes,1,opt,name=delete_vectors,json=deleteVectors,proto3" json:"delete_vectors,omitempty"`
	ShardId       *uint32             `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3,oneof" json:"shard_id,omitempty"`
	ClockTag      *ClockTag           `protobuf:"bytes,3,opt,name=clock_tag,json=clockTag,proto3,oneof" json:"clock_tag,omitempty"`
}

func (x *DeleteVectorsInternal) Reset() {
	*x = DeleteVectorsInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVectorsInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVectorsInternal) ProtoMessage() {}

func (x *DeleteVectorsInternal) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVectorsInternal.ProtoReflect.Descriptor instead.
func (*DeleteVectorsInternal) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteVectorsInternal) GetDeleteVectors() *DeletePointVectors {
	if x != nil {
		return x.DeleteVectors
	}
	return nil
}

func (x *DeleteVectorsInternal) GetShardId() uint32 {
	if x != nil && x.ShardId != nil {
		return *x.ShardId
	}
	return 0
}

func (x *DeleteVectorsInternal) GetClockTag() *ClockTag {
	if x != nil {
		return x.ClockTag
	}
	return nil
}

type SetPayloadPointsInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetPayloadPoints *SetPayloadPoints `protobuf:"bytes,1,opt,name=set_payload_points,json=setPayloadPoints,proto3" json:"set_payload_points,omitempty"`
	ShardId          *uint32           `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3,oneof" json:"shard_id,omitempty"`
	ClockTag         *ClockTag         `protobuf:"bytes,3,opt,name=clock_tag,json=clockTag,proto3,oneof" json:"clock_tag,omitempty"`
}

func (x *SetPayloadPointsInternal) Reset() {
	*x = SetPayloadPointsInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPayloadPointsInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPayloadPointsInternal) ProtoMessage() {}

func (x *SetPayloadPointsInternal) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPayloadPointsInternal.ProtoReflect.Descriptor instead.
func (*SetPayloadPointsInternal) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{6}
}

func (x *SetPayloadPointsInternal) GetSetPayloadPoints() *SetPayloadPoints {
	if x != nil {
		return x.SetPayloadPoints
	}
	return nil
}

func (x *SetPayloadPointsInternal) GetShardId() uint32 {
	if x != nil && x.ShardId != nil {
		return *x.ShardId
	}
	return 0
}

func (x *SetPayloadPointsInternal) GetClockTag() *ClockTag {
	if x != nil {
		return x.ClockTag
	}
	return nil
}

type DeletePayloadPointsInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeletePayloadPoints *DeletePayloadPoints `protobuf:"bytes,1,opt,name=delete_payload_points,json=deletePayloadPoints,proto3" json:"delete_payload_points,omitempty"`
	ShardId             *uint32              `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3,oneof" json:"shard_id,omitempty"`
	ClockTag            *ClockTag            `protobuf:"bytes,3,opt,name=clock_tag,json=clockTag,proto3,oneof" json:"clock_tag,omitempty"`
}

func (x *DeletePayloadPointsInternal) Reset() {
	*x = DeletePayloadPointsInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePayloadPointsInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePayloadPointsInternal) ProtoMessage() {}

func (x *DeletePayloadPointsInternal) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePayloadPointsInternal.ProtoReflect.Descriptor instead.
func (*DeletePayloadPointsInternal) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeletePayloadPointsInternal) GetDeletePayloadPoints() *DeletePayloadPoints {
	if x != nil {
		return x.DeletePayloadPoints
	}
	return nil
}

func (x *DeletePayloadPointsInternal) GetShardId() uint32 {
	if x != nil && x.ShardId != nil {
		return *x.ShardId
	}
	return 0
}

func (x *DeletePayloadPointsInternal) GetClockTag() *ClockTag {
	if x != nil {
		return x.ClockTag
	}
	return nil
}

type ClearPayloadPointsInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClearPayloadPoints *ClearPayloadPoints `protobuf:"bytes,1,opt,name=clear_payload_points,json=clearPayloadPoints,proto3" json:"clear_payload_points,omitempty"`
	ShardId            *uint32             `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3,oneof" json:"shard_id,omitempty"`
	ClockTag           *ClockTag           `protobuf:"bytes,3,opt,name=clock_tag,json=clockTag,proto3,oneof" json:"clock_tag,omitempty"`
}

func (x *ClearPayloadPointsInternal) Reset() {
	*x = ClearPayloadPointsInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearPayloadPointsInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearPayloadPointsInternal) ProtoMessage() {}

func (x *ClearPayloadPointsInternal) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearPayloadPointsInternal.ProtoReflect.Descriptor instead.
func (*ClearPayloadPointsInternal) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{8}
}

func (x *ClearPayloadPointsInternal) GetClearPayloadPoints() *ClearPayloadPoints {
	if x != nil {
		return x.ClearPayloadPoints
	}
	return nil
}

func (x *ClearPayloadPointsInternal) GetShardId() uint32 {
	if x != nil && x.ShardId != nil {
		return *x.ShardId
	}
	return 0
}

func (x *ClearPayloadPointsInternal) GetClockTag() *ClockTag {
	if x != nil {
		return x.ClockTag
	}
	return nil
}

type CreateFieldIndexCollectionInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateFieldIndexCollection *CreateFieldIndexCollection `protobuf:"bytes,1,opt,name=create_field_index_collection,json=createFieldIndexCollection,proto3" json:"create_field_index_collection,omitempty"`
	ShardId                    *uint32                     `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3,oneof" json:"shard_id,omitempty"`
	ClockTag                   *ClockTag                   `protobuf:"bytes,3,opt,name=clock_tag,json=clockTag,proto3,oneof" json:"clock_tag,omitempty"`
}

func (x *CreateFieldIndexCollectionInternal) Reset() {
	*x = CreateFieldIndexCollectionInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFieldIndexCollectionInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFieldIndexCollectionInternal) ProtoMessage() {}

func (x *CreateFieldIndexCollectionInternal) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFieldIndexCollectionInternal.ProtoReflect.Descriptor instead.
func (*CreateFieldIndexCollectionInternal) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{9}
}

func (x *CreateFieldIndexCollectionInternal) GetCreateFieldIndexCollection() *CreateFieldIndexCollection {
	if x != nil {
		return x.CreateFieldIndexCollection
	}
	return nil
}

func (x *CreateFieldIndexCollectionInternal) GetShardId() uint32 {
	if x != nil && x.ShardId != nil {
		return *x.ShardId
	}
	return 0
}

func (x *CreateFieldIndexCollectionInternal) GetClockTag() *ClockTag {
	if x != nil {
		return x.ClockTag
	}
	return nil
}

type DeleteFieldIndexCollectionInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteFieldIndexCollection *DeleteFieldIndexCollection `protobuf:"bytes,1,opt,name=delete_field_index_collection,json=deleteFieldIndexCollection,proto3" json:"delete_field_index_collection,omitempty"`
	ShardId                    *uint32                     `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3,oneof" json:"shard_id,omitempty"`
	ClockTag                   *ClockTag                   `protobuf:"bytes,3,opt,name=clock_tag,json=clockTag,proto3,oneof" json:"clock_tag,omitempty"`
}

func (x *DeleteFieldIndexCollectionInternal) Reset() {
	*x = DeleteFieldIndexCollectionInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFieldIndexCollectionInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFieldIndexCollectionInternal) ProtoMessage() {}

func (x *DeleteFieldIndexCollectionInternal) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFieldIndexCollectionInternal.ProtoReflect.Descriptor instead.
func (*DeleteFieldIndexCollectionInternal) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteFieldIndexCollectionInternal) GetDeleteFieldIndexCollection() *DeleteFieldIndexCollection {
	if x != nil {
		return x.DeleteFieldIndexCollection
	}
	return nil
}

func (x *DeleteFieldIndexCollectionInternal) GetShardId() uint32 {
	if x != nil && x.ShardId != nil {
		return *x.ShardId
	}
	return 0
}

func (x *DeleteFieldIndexCollectionInternal) GetClockTag() *ClockTag {
	if x != nil {
		return x.ClockTag
	}
	return nil
}

// Has to be backward compatible with `PointsOperationResponse`!
type PointsOperationResponseInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *UpdateResultInternal `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Time   float64               `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
}

func (x *PointsOperationResponseInternal) Reset() {
	*x = PointsOperationResponseInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsOperationResponseInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsOperationResponseInternal) ProtoMessage() {}

func (x *PointsOperationResponseInternal) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsOperationResponseInternal.ProtoReflect.Descriptor instead.
func (*PointsOperationResponseInternal) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{11}
}

func (x *PointsOperationResponseInternal) GetResult() *UpdateResultInternal {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *PointsOperationResponseInternal) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// Has to be backward compatible with `UpdateResult`!
type UpdateResultInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationId *uint64      `protobuf:"varint,1,opt,name=operation_id,json=operationId,proto3,oneof" json:"operation_id,omitempty"` // Number of operation
	Status      UpdateStatus `protobuf:"varint,2,opt,name=status,proto3,enum=qdrant.UpdateStatus" json:"status,omitempty"`           // Operation status
	ClockTag    *ClockTag    `protobuf:"bytes,3,opt,name=clock_tag,json=clockTag,proto3,oneof" json:"clock_tag,omitempty"`
}

func (x *UpdateResultInternal) Reset() {
	*x = UpdateResultInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResultInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResultInternal) ProtoMessage() {}

func (x *UpdateResultInternal) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResultInternal.ProtoReflect.Descriptor instead.
func (*UpdateResultInternal) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateResultInternal) GetOperationId() uint64 {
	if x != nil && x.OperationId != nil {
		return *x.OperationId
	}
	return 0
}

func (x *UpdateResultInternal) GetStatus() UpdateStatus {
	if x != nil {
		return x.Status
	}
	return UpdateStatus_UnknownUpdateStatus
}

func (x *UpdateResultInternal) GetClockTag() *ClockTag {
	if x != nil {
		return x.ClockTag
	}
	return nil
}

type ClockTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId    uint64 `protobuf:"varint,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	ClockId   uint32 `protobuf:"varint,2,opt,name=clock_id,json=clockId,proto3" json:"clock_id,omitempty"`
	ClockTick uint64 `protobuf:"varint,3,opt,name=clock_tick,json=clockTick,proto3" json:"clock_tick,omitempty"`
	Token     uint64 `protobuf:"varint,4,opt,name=token,proto3" json:"token,omitempty"`
	Force     bool   `protobuf:"varint,5,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *ClockTag) Reset() {
	*x = ClockTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockTag) ProtoMessage() {}

func (x *ClockTag) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockTag.ProtoReflect.Descriptor instead.
func (*ClockTag) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{13}
}

func (x *ClockTag) GetPeerId() uint64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *ClockTag) GetClockId() uint32 {
	if x != nil {
		return x.ClockId
	}
	return 0
}

func (x *ClockTag) GetClockTick() uint64 {
	if x != nil {
		return x.ClockTick
	}
	return 0
}

func (x *ClockTag) GetToken() uint64 {
	if x != nil {
		return x.Token
	}
	return 0
}

func (x *ClockTag) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type SearchPointsInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchPoints *SearchPoints `protobuf:"bytes,1,opt,name=search_points,json=searchPoints,proto3" json:"search_points,omitempty"`
	ShardId      *uint32       `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3,oneof" json:"shard_id,omitempty"`
}

func (x *SearchPointsInternal) Reset() {
	*x = SearchPointsInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPointsInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPointsInternal) ProtoMessage() {}

func (x *SearchPointsInternal) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPointsInternal.ProtoReflect.Descriptor instead.
func (*SearchPointsInternal) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{14}
}

func (x *SearchPointsInternal) GetSearchPoints() *SearchPoints {
	if x != nil {
		return x.SearchPoints
	}
	return nil
}

func (x *SearchPointsInternal) GetShardId() uint32 {
	if x != nil && x.ShardId != nil {
		return *x.ShardId
	}
	return 0
}

type SearchBatchPointsInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string          `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	SearchPoints   []*SearchPoints `protobuf:"bytes,2,rep,name=search_points,json=searchPoints,proto3" json:"search_points,omitempty"`
	ShardId        *uint32         `protobuf:"varint,3,opt,name=shard_id,json=shardId,proto3,oneof" json:"shard_id,omitempty"`
	Timeout        *uint64         `protobuf:"varint,4,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
}

func (x *SearchBatchPointsInternal) Reset() {
	*x = SearchBatchPointsInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchBatchPointsInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchBatchPointsInternal) ProtoMessage() {}

func (x *SearchBatchPointsInternal) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchBatchPointsInternal.ProtoReflect.Descriptor instead.
func (*SearchBatchPointsInternal) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{15}
}

func (x *SearchBatchPointsInternal) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *SearchBatchPointsInternal) GetSearchPoints() []*SearchPoints {
	if x != nil {
		return x.SearchPoints
	}
	return nil
}

func (x *SearchBatchPointsInternal) GetShardId() uint32 {
	if x != nil && x.ShardId != nil {
		return *x.ShardId
	}
	return 0
}

func (x *SearchBatchPointsInternal) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

type RecoQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positives []*Vector `protobuf:"bytes,1,rep,name=positives,proto3" json:"positives,omitempty"`
	Negatives []*Vector `protobuf:"bytes,2,rep,name=negatives,proto3" json:"negatives,omitempty"`
}

func (x *RecoQuery) Reset() {
	*x = RecoQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoQuery) ProtoMessage() {}

func (x *RecoQuery) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoQuery.ProtoReflect.Descriptor instead.
func (*RecoQuery) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{16}
}

func (x *RecoQuery) GetPositives() []*Vector {
	if x != nil {
		return x.Positives
	}
	return nil
}

func (x *RecoQuery) GetNegatives() []*Vector {
	if x != nil {
		return x.Negatives
	}
	return nil
}

type ContextPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positive *Vector `protobuf:"bytes,1,opt,name=positive,proto3" json:"positive,omitempty"`
	Negative *Vector `protobuf:"bytes,2,opt,name=negative,proto3" json:"negative,omitempty"`
}

func (x *ContextPair) Reset() {
	*x = ContextPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextPair) ProtoMessage() {}

func (x *ContextPair) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextPair.ProtoReflect.Descriptor instead.
func (*ContextPair) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{17}
}

func (x *ContextPair) GetPositive() *Vector {
	if x != nil {
		return x.Positive
	}
	return nil
}

func (x *ContextPair) GetNegative() *Vector {
	if x != nil {
		return x.Negative
	}
	return nil
}

type DiscoveryQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target  *Vector        `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Context []*ContextPair `protobuf:"bytes,2,rep,name=context,proto3" json:"context,omitempty"`
}

func (x *DiscoveryQuery) Reset() {
	*x = DiscoveryQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoveryQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoveryQuery) ProtoMessage() {}

func (x *DiscoveryQuery) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoveryQuery.ProtoReflect.Descriptor instead.
func (*DiscoveryQuery) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{18}
}

func (x *DiscoveryQuery) GetTarget() *Vector {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *DiscoveryQuery) GetContext() []*ContextPair {
	if x != nil {
		return x.Context
	}
	return nil
}

type ContextQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context []*ContextPair `protobuf:"bytes,1,rep,name=context,proto3" json:"context,omitempty"`
}

func (x *ContextQuery) Reset() {
	*x = ContextQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextQuery) ProtoMessage() {}

func (x *ContextQuery) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextQuery.ProtoReflect.Descriptor instead.
func (*ContextQuery) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{19}
}

func (x *ContextQuery) GetContext() []*ContextPair {
	if x != nil {
		return x.Context
	}
	return nil
}

type QueryEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//
	//	*QueryEnum_NearestNeighbors
	//	*QueryEnum_RecommendBestScore
	//	*QueryEnum_Discover
	//	*QueryEnum_Context
	Query isQueryEnum_Query `protobuf_oneof:"query"`
}

func (x *QueryEnum) Reset() {
	*x = QueryEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryEnum) ProtoMessage() {}

func (x *QueryEnum) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryEnum.ProtoReflect.Descriptor instead.
func (*QueryEnum) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{20}
}

func (m *QueryEnum) GetQuery() isQueryEnum_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *QueryEnum) GetNearestNeighbors() *Vector {
	if x, ok := x.GetQuery().(*QueryEnum_NearestNeighbors); ok {
		return x.NearestNeighbors
	}
	return nil
}

func (x *QueryEnum) GetRecommendBestScore() *RecoQuery {
	if x, ok := x.GetQuery().(*QueryEnum_RecommendBestScore); ok {
		return x.RecommendBestScore
	}
	return nil
}

func (x *QueryEnum) GetDiscover() *DiscoveryQuery {
	if x, ok := x.GetQuery().(*QueryEnum_Discover); ok {
		return x.Discover
	}
	return nil
}

func (x *QueryEnum) GetContext() *ContextQuery {
	if x, ok := x.GetQuery().(*QueryEnum_Context); ok {
		return x.Context
	}
	return nil
}

type isQueryEnum_Query interface {
	isQueryEnum_Query()
}

type QueryEnum_NearestNeighbors struct {
	NearestNeighbors *Vector `protobuf:"bytes,1,opt,name=nearest_neighbors,json=nearestNeighbors,proto3,oneof"` // ANN
}

type QueryEnum_RecommendBestScore struct {
	RecommendBestScore *RecoQuery `protobuf:"bytes,2,opt,name=recommend_best_score,json=recommendBestScore,proto3,oneof"` // Recommend points with higher similarity to positive examples
}

type QueryEnum_Discover struct {
	Discover *DiscoveryQuery `protobuf:"bytes,3,opt,name=discover,proto3,oneof"` // Search for points that get closer to a target, constrained by a context of positive and negative pairs
}

type QueryEnum_Context struct {
	Context *ContextQuery `protobuf:"bytes,4,opt,name=context,proto3,oneof"` // Use only the context to find points that minimize loss against negative examples
}

func (*QueryEnum_NearestNeighbors) isQueryEnum_Query() {}

func (*QueryEnum_RecommendBestScore) isQueryEnum_Query() {}

func (*QueryEnum_Discover) isQueryEnum_Query() {}

func (*QueryEnum_Context) isQueryEnum_Query() {}

// This is only used internally, so it makes more sense to add it here rather than in points.proto
type CoreSearchPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName  string               `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Query           *QueryEnum           `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Filter          *Filter              `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	Limit           uint64               `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	WithPayload     *WithPayloadSelector `protobuf:"bytes,5,opt,name=with_payload,json=withPayload,proto3" json:"with_payload,omitempty"`
	Params          *SearchParams        `protobuf:"bytes,6,opt,name=params,proto3" json:"params,omitempty"`
	ScoreThreshold  *float32             `protobuf:"fixed32,7,opt,name=score_threshold,json=scoreThreshold,proto3,oneof" json:"score_threshold,omitempty"`
	Offset          *uint64              `protobuf:"varint,8,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	VectorName      *string              `protobuf:"bytes,9,opt,name=vector_name,json=vectorName,proto3,oneof" json:"vector_name,omitempty"`
	WithVectors     *WithVectorsSelector `protobuf:"bytes,10,opt,name=with_vectors,json=withVectors,proto3,oneof" json:"with_vectors,omitempty"`
	ReadConsistency *ReadConsistency     `protobuf:"bytes,11,opt,name=read_consistency,json=readConsistency,proto3,oneof" json:"read_consistency,omitempty"`
}

func (x *CoreSearchPoints) Reset() {
	*x = CoreSearchPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreSearchPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreSearchPoints) ProtoMessage() {}

func (x *CoreSearchPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreSearchPoints.ProtoReflect.Descriptor instead.
func (*CoreSearchPoints) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{21}
}

func (x *CoreSearchPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *CoreSearchPoints) GetQuery() *QueryEnum {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *CoreSearchPoints) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *CoreSearchPoints) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CoreSearchPoints) GetWithPayload() *WithPayloadSelector {
	if x != nil {
		return x.WithPayload
	}
	return nil
}

func (x *CoreSearchPoints) GetParams() *SearchParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CoreSearchPoints) GetScoreThreshold() float32 {
	if x != nil && x.ScoreThreshold != nil {
		return *x.ScoreThreshold
	}
	return 0
}

func (x *CoreSearchPoints) GetOffset() uint64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *CoreSearchPoints) GetVectorName() string {
	if x != nil && x.VectorName != nil {
		return *x.VectorName
	}
	return ""
}

func (x *CoreSearchPoints) GetWithVectors() *WithVectorsSelector {
	if x != nil {
		return x.WithVectors
	}
	return nil
}

func (x *CoreSearchPoints) GetReadConsistency() *ReadConsistency {
	if x != nil {
		return x.ReadConsistency
	}
	return nil
}

type CoreSearchBatchPointsInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string              `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	SearchPoints   []*CoreSearchPoints `protobuf:"bytes,2,rep,name=search_points,json=searchPoints,proto3" json:"search_points,omitempty"`
	ShardId        *uint32             `protobuf:"varint,3,opt,name=shard_id,json=shardId,proto3,oneof" json:"shard_id,omitempty"`
	Timeout        *uint64             `protobuf:"varint,4,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
}

func (x *CoreSearchBatchPointsInternal) Reset() {
	*x = CoreSearchBatchPointsInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreSearchBatchPointsInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreSearchBatchPointsInternal) ProtoMessage() {}

func (x *CoreSearchBatchPointsInternal) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreSearchBatchPointsInternal.ProtoReflect.Descriptor instead.
func (*CoreSearchBatchPointsInternal) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{22}
}

func (x *CoreSearchBatchPointsInternal) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *CoreSearchBatchPointsInternal) GetSearchPoints() []*CoreSearchPoints {
	if x != nil {
		return x.SearchPoints
	}
	return nil
}

func (x *CoreSearchBatchPointsInternal) GetShardId() uint32 {
	if x != nil && x.ShardId != nil {
		return *x.ShardId
	}
	return 0
}

func (x *CoreSearchBatchPointsInternal) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

type ScrollPointsInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScrollPoints *ScrollPoints `protobuf:"bytes,1,opt,name=scroll_points,json=scrollPoints,proto3" json:"scroll_points,omitempty"`
	ShardId      *uint32       `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3,oneof" json:"shard_id,omitempty"`
}

func (x *ScrollPointsInternal) Reset() {
	*x = ScrollPointsInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrollPointsInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrollPointsInternal) ProtoMessage() {}

func (x *ScrollPointsInternal) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrollPointsInternal.ProtoReflect.Descriptor instead.
func (*ScrollPointsInternal) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{23}
}

func (x *ScrollPointsInternal) GetScrollPoints() *ScrollPoints {
	if x != nil {
		return x.ScrollPoints
	}
	return nil
}

func (x *ScrollPointsInternal) GetShardId() uint32 {
	if x != nil && x.ShardId != nil {
		return *x.ShardId
	}
	return 0
}

type RecommendPointsInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecommendPoints *RecommendPoints `protobuf:"bytes,1,opt,name=recommend_points,json=recommendPoints,proto3" json:"recommend_points,omitempty"`
	ShardId         *uint32          `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3,oneof" json:"shard_id,omitempty"`
}

func (x *RecommendPointsInternal) Reset() {
	*x = RecommendPointsInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendPointsInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendPointsInternal) ProtoMessage() {}

func (x *RecommendPointsInternal) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendPointsInternal.ProtoReflect.Descriptor instead.
func (*RecommendPointsInternal) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{24}
}

func (x *RecommendPointsInternal) GetRecommendPoints() *RecommendPoints {
	if x != nil {
		return x.RecommendPoints
	}
	return nil
}

func (x *RecommendPointsInternal) GetShardId() uint32 {
	if x != nil && x.ShardId != nil {
		return *x.ShardId
	}
	return 0
}

type GetPointsInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetPoints *GetPoints `protobuf:"bytes,1,opt,name=get_points,json=getPoints,proto3" json:"get_points,omitempty"`
	ShardId   *uint32    `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3,oneof" json:"shard_id,omitempty"`
}

func (x *GetPointsInternal) Reset() {
	*x = GetPointsInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPointsInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPointsInternal) ProtoMessage() {}

func (x *GetPointsInternal) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPointsInternal.ProtoReflect.Descriptor instead.
func (*GetPointsInternal) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{25}
}

func (x *GetPointsInternal) GetGetPoints() *GetPoints {
	if x != nil {
		return x.GetPoints
	}
	return nil
}

func (x *GetPointsInternal) GetShardId() uint32 {
	if x != nil && x.ShardId != nil {
		return *x.ShardId
	}
	return 0
}

type CountPointsInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountPoints *CountPoints `protobuf:"bytes,1,opt,name=count_points,json=countPoints,proto3" json:"count_points,omitempty"`
	ShardId     *uint32      `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3,oneof" json:"shard_id,omitempty"`
}

func (x *CountPointsInternal) Reset() {
	*x = CountPointsInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountPointsInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountPointsInternal) ProtoMessage() {}

func (x *CountPointsInternal) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountPointsInternal.ProtoReflect.Descriptor instead.
func (*CountPointsInternal) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{26}
}

func (x *CountPointsInternal) GetCountPoints() *CountPoints {
	if x != nil {
		return x.CountPoints
	}
	return nil
}

func (x *CountPointsInternal) GetShardId() uint32 {
	if x != nil && x.ShardId != nil {
		return *x.ShardId
	}
	return 0
}

// A bare vector. No id reference here.
type RawVector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*RawVector_Dense
	//	*RawVector_Sparse
	//	*RawVector_MultiDense
	Variant isRawVector_Variant `protobuf_oneof:"variant"`
}

func (x *RawVector) Reset() {
	*x = RawVector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawVector) ProtoMessage() {}

func (x *RawVector) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawVector.ProtoReflect.Descriptor instead.
func (*RawVector) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{27}
}

func (m *RawVector) GetVariant() isRawVector_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *RawVector) GetDense() *DenseVector {
	if x, ok := x.GetVariant().(*RawVector_Dense); ok {
		return x.Dense
	}
	return nil
}

func (x *RawVector) GetSparse() *SparseVector {
	if x, ok := x.GetVariant().(*RawVector_Sparse); ok {
		return x.Sparse
	}
	return nil
}

func (x *RawVector) GetMultiDense() *MultiDenseVector {
	if x, ok := x.GetVariant().(*RawVector_MultiDense); ok {
		return x.MultiDense
	}
	return nil
}

type isRawVector_Variant interface {
	isRawVector_Variant()
}

type RawVector_Dense struct {
	Dense *DenseVector `protobuf:"bytes,1,opt,name=dense,proto3,oneof"`
}

type RawVector_Sparse struct {
	Sparse *SparseVector `protobuf:"bytes,2,opt,name=sparse,proto3,oneof"`
}

type RawVector_MultiDense struct {
	MultiDense *MultiDenseVector `protobuf:"bytes,3,opt,name=multi_dense,json=multiDense,proto3,oneof"`
}

func (*RawVector_Dense) isRawVector_Variant() {}

func (*RawVector_Sparse) isRawVector_Variant() {}

func (*RawVector_MultiDense) isRawVector_Variant() {}

// Query variants for raw vectors (ids have been substituted with vectors)
type RawQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*RawQuery_Nearest
	//	*RawQuery_RecommendBestScore
	//	*RawQuery_Discover
	//	*RawQuery_Context_
	Variant isRawQuery_Variant `protobuf_oneof:"variant"`
}

func (x *RawQuery) Reset() {
	*x = RawQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawQuery) ProtoMessage() {}

func (x *RawQuery) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawQuery.ProtoReflect.Descriptor instead.
func (*RawQuery) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{28}
}

func (m *RawQuery) GetVariant() isRawQuery_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *RawQuery) GetNearest() *RawVector {
	if x, ok := x.GetVariant().(*RawQuery_Nearest); ok {
		return x.Nearest
	}
	return nil
}

func (x *RawQuery) GetRecommendBestScore() *RawQuery_Recommend {
	if x, ok := x.GetVariant().(*RawQuery_RecommendBestScore); ok {
		return x.RecommendBestScore
	}
	return nil
}

func (x *RawQuery) GetDiscover() *RawQuery_Discovery {
	if x, ok := x.GetVariant().(*RawQuery_Discover); ok {
		return x.Discover
	}
	return nil
}

func (x *RawQuery) GetContext() *RawQuery_Context {
	if x, ok := x.GetVariant().(*RawQuery_Context_); ok {
		return x.Context
	}
	return nil
}

type isRawQuery_Variant interface {
	isRawQuery_Variant()
}

type RawQuery_Nearest struct {
	Nearest *RawVector `protobuf:"bytes,1,opt,name=nearest,proto3,oneof"` // ANN
}

type RawQuery_RecommendBestScore struct {
	RecommendBestScore *RawQuery_Recommend `protobuf:"bytes,2,opt,name=recommend_best_score,json=recommendBestScore,proto3,oneof"` // Recommend points with highest similarity to positive examples, or lowest to negative examples
}

type RawQuery_Discover struct {
	Discover *RawQuery_Discovery `protobuf:"bytes,3,opt,name=discover,proto3,oneof"` // Search for points that get closer to a target, constrained by a context of positive and negative pairs
}

type RawQuery_Context_ struct {
	Context *RawQuery_Context `protobuf:"bytes,4,opt,name=context,proto3,oneof"` // Use only the context to find points that minimize loss against negative examples
}

func (*RawQuery_Nearest) isRawQuery_Variant() {}

func (*RawQuery_RecommendBestScore) isRawQuery_Variant() {}

func (*RawQuery_Discover) isRawQuery_Variant() {}

func (*RawQuery_Context_) isRawQuery_Variant() {}

type QueryShardPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefetch       []*QueryShardPoints_Prefetch `protobuf:"bytes,1,rep,name=prefetch,proto3" json:"prefetch,omitempty"`
	Query          *QueryShardPoints_Query      `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Using          *string                      `protobuf:"bytes,3,opt,name=using,proto3,oneof" json:"using,omitempty"`
	Filter         *Filter                      `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	Limit          uint64                       `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Params         *SearchParams                `protobuf:"bytes,6,opt,name=params,proto3" json:"params,omitempty"`
	ScoreThreshold *float32                     `protobuf:"fixed32,7,opt,name=score_threshold,json=scoreThreshold,proto3,oneof" json:"score_threshold,omitempty"`
	Offset         uint64                       `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty"`
	WithPayload    *WithPayloadSelector         `protobuf:"bytes,9,opt,name=with_payload,json=withPayload,proto3" json:"with_payload,omitempty"`
	WithVectors    *WithVectorsSelector         `protobuf:"bytes,10,opt,name=with_vectors,json=withVectors,proto3" json:"with_vectors,omitempty"`
}

func (x *QueryShardPoints) Reset() {
	*x = QueryShardPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryShardPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryShardPoints) ProtoMessage() {}

func (x *QueryShardPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryShardPoints.ProtoReflect.Descriptor instead.
func (*QueryShardPoints) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{29}
}

func (x *QueryShardPoints) GetPrefetch() []*QueryShardPoints_Prefetch {
	if x != nil {
		return x.Prefetch
	}
	return nil
}

func (x *QueryShardPoints) GetQuery() *QueryShardPoints_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *QueryShardPoints) GetUsing() string {
	if x != nil && x.Using != nil {
		return *x.Using
	}
	return ""
}

func (x *QueryShardPoints) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *QueryShardPoints) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QueryShardPoints) GetParams() *SearchParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *QueryShardPoints) GetScoreThreshold() float32 {
	if x != nil && x.ScoreThreshold != nil {
		return *x.ScoreThreshold
	}
	return 0
}

func (x *QueryShardPoints) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *QueryShardPoints) GetWithPayload() *WithPayloadSelector {
	if x != nil {
		return x.WithPayload
	}
	return nil
}

func (x *QueryShardPoints) GetWithVectors() *WithVectorsSelector {
	if x != nil {
		return x.WithVectors
	}
	return nil
}

type QueryBatchPointsInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string              `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	QueryPoints    []*QueryShardPoints `protobuf:"bytes,2,rep,name=query_points,json=queryPoints,proto3" json:"query_points,omitempty"`
	ShardId        *uint32             `protobuf:"varint,3,opt,name=shard_id,json=shardId,proto3,oneof" json:"shard_id,omitempty"`
	Timeout        *uint64             `protobuf:"varint,4,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
}

func (x *QueryBatchPointsInternal) Reset() {
	*x = QueryBatchPointsInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBatchPointsInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBatchPointsInternal) ProtoMessage() {}

func (x *QueryBatchPointsInternal) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBatchPointsInternal.ProtoReflect.Descriptor instead.
func (*QueryBatchPointsInternal) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{30}
}

func (x *QueryBatchPointsInternal) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *QueryBatchPointsInternal) GetQueryPoints() []*QueryShardPoints {
	if x != nil {
		return x.QueryPoints
	}
	return nil
}

func (x *QueryBatchPointsInternal) GetShardId() uint32 {
	if x != nil && x.ShardId != nil {
		return *x.ShardId
	}
	return 0
}

func (x *QueryBatchPointsInternal) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

type IntermediateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*ScoredPoint `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *IntermediateResult) Reset() {
	*x = IntermediateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntermediateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntermediateResult) ProtoMessage() {}

func (x *IntermediateResult) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntermediateResult.ProtoReflect.Descriptor instead.
func (*IntermediateResult) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{31}
}

func (x *IntermediateResult) GetResult() []*ScoredPoint {
	if x != nil {
		return x.Result
	}
	return nil
}

type QueryResultInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntermediateResults []*IntermediateResult `protobuf:"bytes,1,rep,name=intermediate_results,json=intermediateResults,proto3" json:"intermediate_results,omitempty"`
}

func (x *QueryResultInternal) Reset() {
	*x = QueryResultInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResultInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResultInternal) ProtoMessage() {}

func (x *QueryResultInternal) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResultInternal.ProtoReflect.Descriptor instead.
func (*QueryResultInternal) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{32}
}

func (x *QueryResultInternal) GetIntermediateResults() []*IntermediateResult {
	if x != nil {
		return x.IntermediateResults
	}
	return nil
}

type QueryBatchResponseInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*QueryResultInternal `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Time    float64                `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
}

func (x *QueryBatchResponseInternal) Reset() {
	*x = QueryBatchResponseInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBatchResponseInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBatchResponseInternal) ProtoMessage() {}

func (x *QueryBatchResponseInternal) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBatchResponseInternal.ProtoReflect.Descriptor instead.
func (*QueryBatchResponseInternal) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{33}
}

func (x *QueryBatchResponseInternal) GetResults() []*QueryResultInternal {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *QueryBatchResponseInternal) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type FacetCountsInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string  `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Key            string  `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Filter         *Filter `protobuf:"bytes,3,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	Limit          uint64  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Exact          bool    `protobuf:"varint,5,opt,name=exact,proto3" json:"exact,omitempty"`
	ShardId        uint32  `protobuf:"varint,6,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	Timeout        *uint64 `protobuf:"varint,7,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
}

func (x *FacetCountsInternal) Reset() {
	*x = FacetCountsInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacetCountsInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacetCountsInternal) ProtoMessage() {}

func (x *FacetCountsInternal) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacetCountsInternal.ProtoReflect.Descriptor instead.
func (*FacetCountsInternal) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{34}
}

func (x *FacetCountsInternal) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *FacetCountsInternal) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FacetCountsInternal) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *FacetCountsInternal) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FacetCountsInternal) GetExact() bool {
	if x != nil {
		return x.Exact
	}
	return false
}

func (x *FacetCountsInternal) GetShardId() uint32 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *FacetCountsInternal) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

type FacetValueInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*FacetValueInternal_KeywordValue
	//	*FacetValueInternal_IntegerValue
	//	*FacetValueInternal_UuidValue
	Variant isFacetValueInternal_Variant `protobuf_oneof:"variant"`
}

func (x *FacetValueInternal) Reset() {
	*x = FacetValueInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacetValueInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacetValueInternal) ProtoMessage() {}

func (x *FacetValueInternal) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacetValueInternal.ProtoReflect.Descriptor instead.
func (*FacetValueInternal) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{35}
}

func (m *FacetValueInternal) GetVariant() isFacetValueInternal_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *FacetValueInternal) GetKeywordValue() string {
	if x, ok := x.GetVariant().(*FacetValueInternal_KeywordValue); ok {
		return x.KeywordValue
	}
	return ""
}

func (x *FacetValueInternal) GetIntegerValue() int64 {
	if x, ok := x.GetVariant().(*FacetValueInternal_IntegerValue); ok {
		return x.IntegerValue
	}
	return 0
}

func (x *FacetValueInternal) GetUuidValue() []byte {
	if x, ok := x.GetVariant().(*FacetValueInternal_UuidValue); ok {
		return x.UuidValue
	}
	return nil
}

type isFacetValueInternal_Variant interface {
	isFacetValueInternal_Variant()
}

type FacetValueInternal_KeywordValue struct {
	KeywordValue string `protobuf:"bytes,1,opt,name=keyword_value,json=keywordValue,proto3,oneof"`
}

type FacetValueInternal_IntegerValue struct {
	IntegerValue int64 `protobuf:"varint,2,opt,name=integer_value,json=integerValue,proto3,oneof"`
}

type FacetValueInternal_UuidValue struct {
	UuidValue []byte `protobuf:"bytes,3,opt,name=uuid_value,json=uuidValue,proto3,oneof"`
}

func (*FacetValueInternal_KeywordValue) isFacetValueInternal_Variant() {}

func (*FacetValueInternal_IntegerValue) isFacetValueInternal_Variant() {}

func (*FacetValueInternal_UuidValue) isFacetValueInternal_Variant() {}

type FacetHitInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *FacetValueInternal `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Count uint64              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *FacetHitInternal) Reset() {
	*x = FacetHitInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacetHitInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacetHitInternal) ProtoMessage() {}

func (x *FacetHitInternal) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacetHitInternal.ProtoReflect.Descriptor instead.
func (*FacetHitInternal) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{36}
}

func (x *FacetHitInternal) GetValue() *FacetValueInternal {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *FacetHitInternal) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type FacetResponseInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hits []*FacetHitInternal `protobuf:"bytes,1,rep,name=hits,proto3" json:"hits,omitempty"`
	Time float64             `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
}

func (x *FacetResponseInternal) Reset() {
	*x = FacetResponseInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacetResponseInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacetResponseInternal) ProtoMessage() {}

func (x *FacetResponseInternal) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacetResponseInternal.ProtoReflect.Descriptor instead.
func (*FacetResponseInternal) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{37}
}

func (x *FacetResponseInternal) GetHits() []*FacetHitInternal {
	if x != nil {
		return x.Hits
	}
	return nil
}

func (x *FacetResponseInternal) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type RawQuery_Recommend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positives []*RawVector `protobuf:"bytes,1,rep,name=positives,proto3" json:"positives,omitempty"`
	Negatives []*RawVector `protobuf:"bytes,2,rep,name=negatives,proto3" json:"negatives,omitempty"`
}

func (x *RawQuery_Recommend) Reset() {
	*x = RawQuery_Recommend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawQuery_Recommend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawQuery_Recommend) ProtoMessage() {}

func (x *RawQuery_Recommend) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawQuery_Recommend.ProtoReflect.Descriptor instead.
func (*RawQuery_Recommend) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{28, 0}
}

func (x *RawQuery_Recommend) GetPositives() []*RawVector {
	if x != nil {
		return x.Positives
	}
	return nil
}

func (x *RawQuery_Recommend) GetNegatives() []*RawVector {
	if x != nil {
		return x.Negatives
	}
	return nil
}

type RawQuery_RawContextPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positive *RawVector `protobuf:"bytes,1,opt,name=positive,proto3" json:"positive,omitempty"`
	Negative *RawVector `protobuf:"bytes,2,opt,name=negative,proto3" json:"negative,omitempty"`
}

func (x *RawQuery_RawContextPair) Reset() {
	*x = RawQuery_RawContextPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawQuery_RawContextPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawQuery_RawContextPair) ProtoMessage() {}

func (x *RawQuery_RawContextPair) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawQuery_RawContextPair.ProtoReflect.Descriptor instead.
func (*RawQuery_RawContextPair) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{28, 1}
}

func (x *RawQuery_RawContextPair) GetPositive() *RawVector {
	if x != nil {
		return x.Positive
	}
	return nil
}

func (x *RawQuery_RawContextPair) GetNegative() *RawVector {
	if x != nil {
		return x.Negative
	}
	return nil
}

type RawQuery_Discovery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target  *RawVector                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Context []*RawQuery_RawContextPair `protobuf:"bytes,2,rep,name=context,proto3" json:"context,omitempty"`
}

func (x *RawQuery_Discovery) Reset() {
	*x = RawQuery_Discovery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawQuery_Discovery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawQuery_Discovery) ProtoMessage() {}

func (x *RawQuery_Discovery) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawQuery_Discovery.ProtoReflect.Descriptor instead.
func (*RawQuery_Discovery) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{28, 2}
}

func (x *RawQuery_Discovery) GetTarget() *RawVector {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *RawQuery_Discovery) GetContext() []*RawQuery_RawContextPair {
	if x != nil {
		return x.Context
	}
	return nil
}

type RawQuery_Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context []*RawQuery_RawContextPair `protobuf:"bytes,1,rep,name=context,proto3" json:"context,omitempty"`
}

func (x *RawQuery_Context) Reset() {
	*x = RawQuery_Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawQuery_Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawQuery_Context) ProtoMessage() {}

func (x *RawQuery_Context) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawQuery_Context.ProtoReflect.Descriptor instead.
func (*RawQuery_Context) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{28, 3}
}

func (x *RawQuery_Context) GetContext() []*RawQuery_RawContextPair {
	if x != nil {
		return x.Context
	}
	return nil
}

type QueryShardPoints_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Score:
	//
	//	*QueryShardPoints_Query_Vector
	//	*QueryShardPoints_Query_Fusion
	//	*QueryShardPoints_Query_OrderBy
	//	*QueryShardPoints_Query_Sample
	Score isQueryShardPoints_Query_Score `protobuf_oneof:"score"`
}

func (x *QueryShardPoints_Query) Reset() {
	*x = QueryShardPoints_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryShardPoints_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryShardPoints_Query) ProtoMessage() {}

func (x *QueryShardPoints_Query) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryShardPoints_Query.ProtoReflect.Descriptor instead.
func (*QueryShardPoints_Query) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{29, 0}
}

func (m *QueryShardPoints_Query) GetScore() isQueryShardPoints_Query_Score {
	if m != nil {
		return m.Score
	}
	return nil
}

func (x *QueryShardPoints_Query) GetVector() *RawQuery {
	if x, ok := x.GetScore().(*QueryShardPoints_Query_Vector); ok {
		return x.Vector
	}
	return nil
}

func (x *QueryShardPoints_Query) GetFusion() Fusion {
	if x, ok := x.GetScore().(*QueryShardPoints_Query_Fusion); ok {
		return x.Fusion
	}
	return Fusion_RRF
}

func (x *QueryShardPoints_Query) GetOrderBy() *OrderBy {
	if x, ok := x.GetScore().(*QueryShardPoints_Query_OrderBy); ok {
		return x.OrderBy
	}
	return nil
}

func (x *QueryShardPoints_Query) GetSample() Sample {
	if x, ok := x.GetScore().(*QueryShardPoints_Query_Sample); ok {
		return x.Sample
	}
	return Sample_Random
}

type isQueryShardPoints_Query_Score interface {
	isQueryShardPoints_Query_Score()
}

type QueryShardPoints_Query_Vector struct {
	Vector *RawQuery `protobuf:"bytes,1,opt,name=vector,proto3,oneof"` // (re)score against a vector query
}

type QueryShardPoints_Query_Fusion struct {
	Fusion Fusion `protobuf:"varint,2,opt,name=fusion,proto3,enum=qdrant.Fusion,oneof"` // One of the fusion methods
}

type QueryShardPoints_Query_OrderBy struct {
	OrderBy *OrderBy `protobuf:"bytes,3,opt,name=order_by,json=orderBy,proto3,oneof"` // Order by a field
}

type QueryShardPoints_Query_Sample struct {
	Sample Sample `protobuf:"varint,4,opt,name=sample,proto3,enum=qdrant.Sample,oneof"` // Sample points
}

func (*QueryShardPoints_Query_Vector) isQueryShardPoints_Query_Score() {}

func (*QueryShardPoints_Query_Fusion) isQueryShardPoints_Query_Score() {}

func (*QueryShardPoints_Query_OrderBy) isQueryShardPoints_Query_Score() {}

func (*QueryShardPoints_Query_Sample) isQueryShardPoints_Query_Score() {}

type QueryShardPoints_Prefetch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefetch       []*QueryShardPoints_Prefetch `protobuf:"bytes,1,rep,name=prefetch,proto3" json:"prefetch,omitempty"`
	Query          *QueryShardPoints_Query      `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Using          *string                      `protobuf:"bytes,3,opt,name=using,proto3,oneof" json:"using,omitempty"`
	Filter         *Filter                      `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	Limit          uint64                       `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Params         *SearchParams                `protobuf:"bytes,6,opt,name=params,proto3" json:"params,omitempty"`
	ScoreThreshold *float32                     `protobuf:"fixed32,7,opt,name=score_threshold,json=scoreThreshold,proto3,oneof" json:"score_threshold,omitempty"`
}

func (x *QueryShardPoints_Prefetch) Reset() {
	*x = QueryShardPoints_Prefetch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_internal_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryShardPoints_Prefetch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryShardPoints_Prefetch) ProtoMessage() {}

func (x *QueryShardPoints_Prefetch) ProtoReflect() protoreflect.Message {
	mi := &file_points_internal_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryShardPoints_Prefetch.ProtoReflect.Descriptor instead.
func (*QueryShardPoints_Prefetch) Descriptor() ([]byte, []int) {
	return file_points_internal_service_proto_rawDescGZIP(), []int{29, 1}
}

func (x *QueryShardPoints_Prefetch) GetPrefetch() []*QueryShardPoints_Prefetch {
	if x != nil {
		return x.Prefetch
	}
	return nil
}

func (x *QueryShardPoints_Prefetch) GetQuery() *QueryShardPoints_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *QueryShardPoints_Prefetch) GetUsing() string {
	if x != nil && x.Using != nil {
		return *x.Using
	}
	return ""
}

func (x *QueryShardPoints_Prefetch) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *QueryShardPoints_Prefetch) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QueryShardPoints_Prefetch) GetParams() *SearchParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *QueryShardPoints_Prefetch) GetScoreThreshold() float32 {
	if x != nil && x.ScoreThreshold != nil {
		return *x.ScoreThreshold
	}
	return 0
}

var File_points_internal_service_proto protoreflect.FileDescriptor

var file_points_internal_service_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x1a, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x02, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x77,
	0x61, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x49, 0x64, 0x48, 0x01, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x48, 0x02, 0x52, 0x04, 0x74, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x03, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74,
	0x6f, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x22, 0xb8, 0x01, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a,
	0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x09, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x61, 0x67, 0x48, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x67, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x22, 0xc0, 0x01, 0x0a,
	0x14, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x0d, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x0c, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x1e, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x32, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x61, 0x67, 0x48, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61,
	0x67, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x22,
	0xc0, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x67, 0x48, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x61, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74,
	0x61, 0x67, 0x22, 0xc9, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x0e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x1e, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x61, 0x67, 0x48, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x67,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x22, 0xc9,
	0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x0d, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x09, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x67,
	0x48, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x67, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x22, 0xd1, 0x01, 0x0a, 0x18, 0x53,
	0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x12, 0x73, 0x65, 0x74, 0x5f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x10, 0x73,
	0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x1e, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x61, 0x67, 0x48, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x67,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x22, 0xdd,
	0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x4f,
	0x0a, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x13, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x1e, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x61, 0x67, 0x48, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x67,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x22, 0xd9,
	0x01, 0x0a, 0x1a, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x4c, 0x0a,
	0x14, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x12, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x09, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x67,
	0x48, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x67, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x22, 0xfa, 0x01, 0x0a, 0x22, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x12, 0x65, 0x0a, 0x1d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x67, 0x48, 0x01, 0x52,
	0x08, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x22, 0xfa, 0x01, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x65,
	0x0a, 0x1d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74,
	0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x67, 0x48, 0x01, 0x52, 0x08, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x61, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x74, 0x61, 0x67, 0x22, 0x6b, 0x0a, 0x1f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0xbf, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x32, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x61, 0x67, 0x48, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61,
	0x67, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x74, 0x61, 0x67, 0x22, 0x89, 0x01, 0x0a, 0x08, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x67,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69,
	0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x69, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22,
	0x7e, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x22,
	0xd7, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x01, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x67, 0x0a, 0x09, 0x52, 0x65, 0x63,
	0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x73, 0x22, 0x65, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x61, 0x69,
	0x72, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a,
	0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x22, 0x67, 0x0a, 0x0e, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x22, 0x82, 0x02, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x3d, 0x0a, 0x11, 0x6e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x10, 0x6e, 0x65,
	0x61, 0x72, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x45,
	0x0a, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x65, 0x73, 0x74,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x42, 0x65, 0x73, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0xe4, 0x04, 0x0a, 0x10, 0x43, 0x6f, 0x72, 0x65, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x26, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x77, 0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0c, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x03, 0x52,
	0x0b, 0x77, 0x69, 0x74, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x47, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x48, 0x04, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xdf, 0x01,
	0x0a, 0x1d, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22,
	0x7e, 0x0a, 0x14, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x63, 0x72, 0x6f, 0x6c,
	0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x22,
	0x8a, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x10, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x0f,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x1e, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x22, 0x72, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x12, 0x30, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x09, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x22, 0x7a, 0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x1e, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x22, 0xb0, 0x01, 0x0a,
	0x09, 0x52, 0x61, 0x77, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x05, 0x64, 0x65,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x05, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x6e, 0x73, 0x65,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x44,
	0x65, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22,
	0x9c, 0x05, 0x0a, 0x08, 0x52, 0x61, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x07,
	0x6e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x77, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x14, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x52, 0x61, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x42, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x52, 0x61, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x6d, 0x0a, 0x09, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x77, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x6e, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x77, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x09, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x1a, 0x6e, 0x0a, 0x0e, 0x52, 0x61,
	0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x61, 0x69, 0x72, 0x12, 0x2d, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x77, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6e,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x77, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x71, 0x0a, 0x09, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x52, 0x61, 0x77, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x77,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x44, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x52, 0x61, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x77, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22, 0x88,
	0x08, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x12, 0x34, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x75, 0x73, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x75, 0x73, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x2c, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x0e, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0xbe, 0x01, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x2a, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x77, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x66,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x66,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0xd2, 0x02, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x12, 0x3d, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x12, 0x34, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x75, 0x73, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x75, 0x73, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x2c, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x0e, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x75, 0x73, 0x69, 0x6e, 0x67, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xd8, 0x01, 0x0a, 0x18, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52,
	0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x08,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x22, 0x41, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x64, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x4d,
	0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x67, 0x0a,
	0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x13, 0x46, 0x61, 0x63, 0x65, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x78, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x78, 0x61,
	0x63, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x12, 0x46, 0x61, 0x63, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0d, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x25, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x75, 0x75, 0x69, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09,
	0x75, 0x75, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x22, 0x5a, 0x0a, 0x10, 0x46, 0x61, 0x63, 0x65, 0x74, 0x48, 0x69, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x46, 0x61, 0x63, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x59, 0x0a, 0x15, 0x46, 0x61, 0x63, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x04, 0x68, 0x69, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x46, 0x61, 0x63, 0x65, 0x74, 0x48, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x88, 0x0c, 0x0a, 0x0e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x51,
	0x0a, 0x06, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x1c, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x27, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22,
	0x00, 0x12, 0x4d, 0x0a, 0x04, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x1a, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x27, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0x00,
	0x12, 0x51, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x27, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x1a, 0x27, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0x00, 0x12, 0x59,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x1d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x27,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0a, 0x53, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x20, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x27, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x10, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x20, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x27, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x23, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x27, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0c, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x22, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x27, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x27, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0x00,
	0x12, 0x69, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x1a, 0x27, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0f, 0x43,
	0x6f, 0x72, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x25,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x1b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x1c,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x16, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x15, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x12, 0x1f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x1a, 0x19, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x37, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x1a, 0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0a, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x20, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x22, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0x00, 0x12,
	0x45, 0x0a, 0x05, 0x46, 0x61, 0x63, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x1d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x46,
	0x61, 0x63, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x22, 0x00, 0x42, 0x71, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x42, 0x1a, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0xa2, 0x02, 0x03, 0x51, 0x58, 0x58, 0xaa, 0x02, 0x06, 0x51, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0xca, 0x02, 0x06, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0xe2, 0x02, 0x12, 0x51, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x06, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_points_internal_service_proto_rawDescOnce sync.Once
	file_points_internal_service_proto_rawDescData = file_points_internal_service_proto_rawDesc
)

func file_points_internal_service_proto_rawDescGZIP() []byte {
	file_points_internal_service_proto_rawDescOnce.Do(func() {
		file_points_internal_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_points_internal_service_proto_rawDescData)
	})
	return file_points_internal_service_proto_rawDescData
}

var file_points_internal_service_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_points_internal_service_proto_goTypes = []any{
	(*SyncPoints)(nil),                         // 0: qdrant.SyncPoints
	(*SyncPointsInternal)(nil),                 // 1: qdrant.SyncPointsInternal
	(*UpsertPointsInternal)(nil),               // 2: qdrant.UpsertPointsInternal
	(*DeletePointsInternal)(nil),               // 3: qdrant.DeletePointsInternal
	(*UpdateVectorsInternal)(nil),              // 4: qdrant.UpdateVectorsInternal
	(*DeleteVectorsInternal)(nil),              // 5: qdrant.DeleteVectorsInternal
	(*SetPayloadPointsInternal)(nil),           // 6: qdrant.SetPayloadPointsInternal
	(*DeletePayloadPointsInternal)(nil),        // 7: qdrant.DeletePayloadPointsInternal
	(*ClearPayloadPointsInternal)(nil),         // 8: qdrant.ClearPayloadPointsInternal
	(*CreateFieldIndexCollectionInternal)(nil), // 9: qdrant.CreateFieldIndexCollectionInternal
	(*DeleteFieldIndexCollectionInternal)(nil), // 10: qdrant.DeleteFieldIndexCollectionInternal
	(*PointsOperationResponseInternal)(nil),    // 11: qdrant.PointsOperationResponseInternal
	(*UpdateResultInternal)(nil),               // 12: qdrant.UpdateResultInternal
	(*ClockTag)(nil),                           // 13: qdrant.ClockTag
	(*SearchPointsInternal)(nil),               // 14: qdrant.SearchPointsInternal
	(*SearchBatchPointsInternal)(nil),          // 15: qdrant.SearchBatchPointsInternal
	(*RecoQuery)(nil),                          // 16: qdrant.RecoQuery
	(*ContextPair)(nil),                        // 17: qdrant.ContextPair
	(*DiscoveryQuery)(nil),                     // 18: qdrant.DiscoveryQuery
	(*ContextQuery)(nil),                       // 19: qdrant.ContextQuery
	(*QueryEnum)(nil),                          // 20: qdrant.QueryEnum
	(*CoreSearchPoints)(nil),                   // 21: qdrant.CoreSearchPoints
	(*CoreSearchBatchPointsInternal)(nil),      // 22: qdrant.CoreSearchBatchPointsInternal
	(*ScrollPointsInternal)(nil),               // 23: qdrant.ScrollPointsInternal
	(*RecommendPointsInternal)(nil),            // 24: qdrant.RecommendPointsInternal
	(*GetPointsInternal)(nil),                  // 25: qdrant.GetPointsInternal
	(*CountPointsInternal)(nil),                // 26: qdrant.CountPointsInternal
	(*RawVector)(nil),                          // 27: qdrant.RawVector
	(*RawQuery)(nil),                           // 28: qdrant.RawQuery
	(*QueryShardPoints)(nil),                   // 29: qdrant.QueryShardPoints
	(*QueryBatchPointsInternal)(nil),           // 30: qdrant.QueryBatchPointsInternal
	(*IntermediateResult)(nil),                 // 31: qdrant.IntermediateResult
	(*QueryResultInternal)(nil),                // 32: qdrant.QueryResultInternal
	(*QueryBatchResponseInternal)(nil),         // 33: qdrant.QueryBatchResponseInternal
	(*FacetCountsInternal)(nil),                // 34: qdrant.FacetCountsInternal
	(*FacetValueInternal)(nil),                 // 35: qdrant.FacetValueInternal
	(*FacetHitInternal)(nil),                   // 36: qdrant.FacetHitInternal
	(*FacetResponseInternal)(nil),              // 37: qdrant.FacetResponseInternal
	(*RawQuery_Recommend)(nil),                 // 38: qdrant.RawQuery.Recommend
	(*RawQuery_RawContextPair)(nil),            // 39: qdrant.RawQuery.RawContextPair
	(*RawQuery_Discovery)(nil),                 // 40: qdrant.RawQuery.Discovery
	(*RawQuery_Context)(nil),                   // 41: qdrant.RawQuery.Context
	(*QueryShardPoints_Query)(nil),             // 42: qdrant.QueryShardPoints.Query
	(*QueryShardPoints_Prefetch)(nil),          // 43: qdrant.QueryShardPoints.Prefetch
	(*PointStruct)(nil),                        // 44: qdrant.PointStruct
	(*PointId)(nil),                            // 45: qdrant.PointId
	(*WriteOrdering)(nil),                      // 46: qdrant.WriteOrdering
	(*UpsertPoints)(nil),                       // 47: qdrant.UpsertPoints
	(*DeletePoints)(nil),                       // 48: qdrant.DeletePoints
	(*UpdatePointVectors)(nil),                 // 49: qdrant.UpdatePointVectors
	(*DeletePointVectors)(nil),                 // 50: qdrant.DeletePointVectors
	(*SetPayloadPoints)(nil),                   // 51: qdrant.SetPayloadPoints
	(*DeletePayloadPoints)(nil),                // 52: qdrant.DeletePayloadPoints
	(*ClearPayloadPoints)(nil),                 // 53: qdrant.ClearPayloadPoints
	(*CreateFieldIndexCollection)(nil),         // 54: qdrant.CreateFieldIndexCollection
	(*DeleteFieldIndexCollection)(nil),         // 55: qdrant.DeleteFieldIndexCollection
	(UpdateStatus)(0),                          // 56: qdrant.UpdateStatus
	(*SearchPoints)(nil),                       // 57: qdrant.SearchPoints
	(*Vector)(nil),                             // 58: qdrant.Vector
	(*Filter)(nil),                             // 59: qdrant.Filter
	(*WithPayloadSelector)(nil),                // 60: qdrant.WithPayloadSelector
	(*SearchParams)(nil),                       // 61: qdrant.SearchParams
	(*WithVectorsSelector)(nil),                // 62: qdrant.WithVectorsSelector
	(*ReadConsistency)(nil),                    // 63: qdrant.ReadConsistency
	(*ScrollPoints)(nil),                       // 64: qdrant.ScrollPoints
	(*RecommendPoints)(nil),                    // 65: qdrant.RecommendPoints
	(*GetPoints)(nil),                          // 66: qdrant.GetPoints
	(*CountPoints)(nil),                        // 67: qdrant.CountPoints
	(*DenseVector)(nil),                        // 68: qdrant.DenseVector
	(*SparseVector)(nil),                       // 69: qdrant.SparseVector
	(*MultiDenseVector)(nil),                   // 70: qdrant.MultiDenseVector
	(*ScoredPoint)(nil),                        // 71: qdrant.ScoredPoint
	(Fusion)(0),                                // 72: qdrant.Fusion
	(*OrderBy)(nil),                            // 73: qdrant.OrderBy
	(Sample)(0),                                // 74: qdrant.Sample
	(*SearchBatchResponse)(nil),                // 75: qdrant.SearchBatchResponse
	(*ScrollResponse)(nil),                     // 76: qdrant.ScrollResponse
	(*CountResponse)(nil),                      // 77: qdrant.CountResponse
	(*RecommendResponse)(nil),                  // 78: qdrant.RecommendResponse
	(*GetResponse)(nil),                        // 79: qdrant.GetResponse
}
var file_points_internal_service_proto_depIdxs = []int32{
	44,  // 0: qdrant.SyncPoints.points:type_name -> qdrant.PointStruct
	45,  // 1: qdrant.SyncPoints.from_id:type_name -> qdrant.PointId
	45,  // 2: qdrant.SyncPoints.to_id:type_name -> qdrant.PointId
	46,  // 3: qdrant.SyncPoints.ordering:type_name -> qdrant.WriteOrdering
	0,   // 4: qdrant.SyncPointsInternal.sync_points:type_name -> qdrant.SyncPoints
	13,  // 5: qdrant.SyncPointsInternal.clock_tag:type_name -> qdrant.ClockTag
	47,  // 6: qdrant.UpsertPointsInternal.upsert_points:type_name -> qdrant.UpsertPoints
	13,  // 7: qdrant.UpsertPointsInternal.clock_tag:type_name -> qdrant.ClockTag
	48,  // 8: qdrant.DeletePointsInternal.delete_points:type_name -> qdrant.DeletePoints
	13,  // 9: qdrant.DeletePointsInternal.clock_tag:type_name -> qdrant.ClockTag
	49,  // 10: qdrant.UpdateVectorsInternal.update_vectors:type_name -> qdrant.UpdatePointVectors
	13,  // 11: qdrant.UpdateVectorsInternal.clock_tag:type_name -> qdrant.ClockTag
	50,  // 12: qdrant.DeleteVectorsInternal.delete_vectors:type_name -> qdrant.DeletePointVectors
	13,  // 13: qdrant.DeleteVectorsInternal.clock_tag:type_name -> qdrant.ClockTag
	51,  // 14: qdrant.SetPayloadPointsInternal.set_payload_points:type_name -> qdrant.SetPayloadPoints
	13,  // 15: qdrant.SetPayloadPointsInternal.clock_tag:type_name -> qdrant.ClockTag
	52,  // 16: qdrant.DeletePayloadPointsInternal.delete_payload_points:type_name -> qdrant.DeletePayloadPoints
	13,  // 17: qdrant.DeletePayloadPointsInternal.clock_tag:type_name -> qdrant.ClockTag
	53,  // 18: qdrant.ClearPayloadPointsInternal.clear_payload_points:type_name -> qdrant.ClearPayloadPoints
	13,  // 19: qdrant.ClearPayloadPointsInternal.clock_tag:type_name -> qdrant.ClockTag
	54,  // 20: qdrant.CreateFieldIndexCollectionInternal.create_field_index_collection:type_name -> qdrant.CreateFieldIndexCollection
	13,  // 21: qdrant.CreateFieldIndexCollectionInternal.clock_tag:type_name -> qdrant.ClockTag
	55,  // 22: qdrant.DeleteFieldIndexCollectionInternal.delete_field_index_collection:type_name -> qdrant.DeleteFieldIndexCollection
	13,  // 23: qdrant.DeleteFieldIndexCollectionInternal.clock_tag:type_name -> qdrant.ClockTag
	12,  // 24: qdrant.PointsOperationResponseInternal.result:type_name -> qdrant.UpdateResultInternal
	56,  // 25: qdrant.UpdateResultInternal.status:type_name -> qdrant.UpdateStatus
	13,  // 26: qdrant.UpdateResultInternal.clock_tag:type_name -> qdrant.ClockTag
	57,  // 27: qdrant.SearchPointsInternal.search_points:type_name -> qdrant.SearchPoints
	57,  // 28: qdrant.SearchBatchPointsInternal.search_points:type_name -> qdrant.SearchPoints
	58,  // 29: qdrant.RecoQuery.positives:type_name -> qdrant.Vector
	58,  // 30: qdrant.RecoQuery.negatives:type_name -> qdrant.Vector
	58,  // 31: qdrant.ContextPair.positive:type_name -> qdrant.Vector
	58,  // 32: qdrant.ContextPair.negative:type_name -> qdrant.Vector
	58,  // 33: qdrant.DiscoveryQuery.target:type_name -> qdrant.Vector
	17,  // 34: qdrant.DiscoveryQuery.context:type_name -> qdrant.ContextPair
	17,  // 35: qdrant.ContextQuery.context:type_name -> qdrant.ContextPair
	58,  // 36: qdrant.QueryEnum.nearest_neighbors:type_name -> qdrant.Vector
	16,  // 37: qdrant.QueryEnum.recommend_best_score:type_name -> qdrant.RecoQuery
	18,  // 38: qdrant.QueryEnum.discover:type_name -> qdrant.DiscoveryQuery
	19,  // 39: qdrant.QueryEnum.context:type_name -> qdrant.ContextQuery
	20,  // 40: qdrant.CoreSearchPoints.query:type_name -> qdrant.QueryEnum
	59,  // 41: qdrant.CoreSearchPoints.filter:type_name -> qdrant.Filter
	60,  // 42: qdrant.CoreSearchPoints.with_payload:type_name -> qdrant.WithPayloadSelector
	61,  // 43: qdrant.CoreSearchPoints.params:type_name -> qdrant.SearchParams
	62,  // 44: qdrant.CoreSearchPoints.with_vectors:type_name -> qdrant.WithVectorsSelector
	63,  // 45: qdrant.CoreSearchPoints.read_consistency:type_name -> qdrant.ReadConsistency
	21,  // 46: qdrant.CoreSearchBatchPointsInternal.search_points:type_name -> qdrant.CoreSearchPoints
	64,  // 47: qdrant.ScrollPointsInternal.scroll_points:type_name -> qdrant.ScrollPoints
	65,  // 48: qdrant.RecommendPointsInternal.recommend_points:type_name -> qdrant.RecommendPoints
	66,  // 49: qdrant.GetPointsInternal.get_points:type_name -> qdrant.GetPoints
	67,  // 50: qdrant.CountPointsInternal.count_points:type_name -> qdrant.CountPoints
	68,  // 51: qdrant.RawVector.dense:type_name -> qdrant.DenseVector
	69,  // 52: qdrant.RawVector.sparse:type_name -> qdrant.SparseVector
	70,  // 53: qdrant.RawVector.multi_dense:type_name -> qdrant.MultiDenseVector
	27,  // 54: qdrant.RawQuery.nearest:type_name -> qdrant.RawVector
	38,  // 55: qdrant.RawQuery.recommend_best_score:type_name -> qdrant.RawQuery.Recommend
	40,  // 56: qdrant.RawQuery.discover:type_name -> qdrant.RawQuery.Discovery
	41,  // 57: qdrant.RawQuery.context:type_name -> qdrant.RawQuery.Context
	43,  // 58: qdrant.QueryShardPoints.prefetch:type_name -> qdrant.QueryShardPoints.Prefetch
	42,  // 59: qdrant.QueryShardPoints.query:type_name -> qdrant.QueryShardPoints.Query
	59,  // 60: qdrant.QueryShardPoints.filter:type_name -> qdrant.Filter
	61,  // 61: qdrant.QueryShardPoints.params:type_name -> qdrant.SearchParams
	60,  // 62: qdrant.QueryShardPoints.with_payload:type_name -> qdrant.WithPayloadSelector
	62,  // 63: qdrant.QueryShardPoints.with_vectors:type_name -> qdrant.WithVectorsSelector
	29,  // 64: qdrant.QueryBatchPointsInternal.query_points:type_name -> qdrant.QueryShardPoints
	71,  // 65: qdrant.IntermediateResult.result:type_name -> qdrant.ScoredPoint
	31,  // 66: qdrant.QueryResultInternal.intermediate_results:type_name -> qdrant.IntermediateResult
	32,  // 67: qdrant.QueryBatchResponseInternal.results:type_name -> qdrant.QueryResultInternal
	59,  // 68: qdrant.FacetCountsInternal.filter:type_name -> qdrant.Filter
	35,  // 69: qdrant.FacetHitInternal.value:type_name -> qdrant.FacetValueInternal
	36,  // 70: qdrant.FacetResponseInternal.hits:type_name -> qdrant.FacetHitInternal
	27,  // 71: qdrant.RawQuery.Recommend.positives:type_name -> qdrant.RawVector
	27,  // 72: qdrant.RawQuery.Recommend.negatives:type_name -> qdrant.RawVector
	27,  // 73: qdrant.RawQuery.RawContextPair.positive:type_name -> qdrant.RawVector
	27,  // 74: qdrant.RawQuery.RawContextPair.negative:type_name -> qdrant.RawVector
	27,  // 75: qdrant.RawQuery.Discovery.target:type_name -> qdrant.RawVector
	39,  // 76: qdrant.RawQuery.Discovery.context:type_name -> qdrant.RawQuery.RawContextPair
	39,  // 77: qdrant.RawQuery.Context.context:type_name -> qdrant.RawQuery.RawContextPair
	28,  // 78: qdrant.QueryShardPoints.Query.vector:type_name -> qdrant.RawQuery
	72,  // 79: qdrant.QueryShardPoints.Query.fusion:type_name -> qdrant.Fusion
	73,  // 80: qdrant.QueryShardPoints.Query.order_by:type_name -> qdrant.OrderBy
	74,  // 81: qdrant.QueryShardPoints.Query.sample:type_name -> qdrant.Sample
	43,  // 82: qdrant.QueryShardPoints.Prefetch.prefetch:type_name -> qdrant.QueryShardPoints.Prefetch
	42,  // 83: qdrant.QueryShardPoints.Prefetch.query:type_name -> qdrant.QueryShardPoints.Query
	59,  // 84: qdrant.QueryShardPoints.Prefetch.filter:type_name -> qdrant.Filter
	61,  // 85: qdrant.QueryShardPoints.Prefetch.params:type_name -> qdrant.SearchParams
	2,   // 86: qdrant.PointsInternal.Upsert:input_type -> qdrant.UpsertPointsInternal
	1,   // 87: qdrant.PointsInternal.Sync:input_type -> qdrant.SyncPointsInternal
	3,   // 88: qdrant.PointsInternal.Delete:input_type -> qdrant.DeletePointsInternal
	4,   // 89: qdrant.PointsInternal.UpdateVectors:input_type -> qdrant.UpdateVectorsInternal
	5,   // 90: qdrant.PointsInternal.DeleteVectors:input_type -> qdrant.DeleteVectorsInternal
	6,   // 91: qdrant.PointsInternal.SetPayload:input_type -> qdrant.SetPayloadPointsInternal
	6,   // 92: qdrant.PointsInternal.OverwritePayload:input_type -> qdrant.SetPayloadPointsInternal
	7,   // 93: qdrant.PointsInternal.DeletePayload:input_type -> qdrant.DeletePayloadPointsInternal
	8,   // 94: qdrant.PointsInternal.ClearPayload:input_type -> qdrant.ClearPayloadPointsInternal
	9,   // 95: qdrant.PointsInternal.CreateFieldIndex:input_type -> qdrant.CreateFieldIndexCollectionInternal
	10,  // 96: qdrant.PointsInternal.DeleteFieldIndex:input_type -> qdrant.DeleteFieldIndexCollectionInternal
	22,  // 97: qdrant.PointsInternal.CoreSearchBatch:input_type -> qdrant.CoreSearchBatchPointsInternal
	23,  // 98: qdrant.PointsInternal.Scroll:input_type -> qdrant.ScrollPointsInternal
	26,  // 99: qdrant.PointsInternal.Count:input_type -> qdrant.CountPointsInternal
	24,  // 100: qdrant.PointsInternal.Recommend:input_type -> qdrant.RecommendPointsInternal
	25,  // 101: qdrant.PointsInternal.Get:input_type -> qdrant.GetPointsInternal
	30,  // 102: qdrant.PointsInternal.QueryBatch:input_type -> qdrant.QueryBatchPointsInternal
	34,  // 103: qdrant.PointsInternal.Facet:input_type -> qdrant.FacetCountsInternal
	11,  // 104: qdrant.PointsInternal.Upsert:output_type -> qdrant.PointsOperationResponseInternal
	11,  // 105: qdrant.PointsInternal.Sync:output_type -> qdrant.PointsOperationResponseInternal
	11,  // 106: qdrant.PointsInternal.Delete:output_type -> qdrant.PointsOperationResponseInternal
	11,  // 107: qdrant.PointsInternal.UpdateVectors:output_type -> qdrant.PointsOperationResponseInternal
	11,  // 108: qdrant.PointsInternal.DeleteVectors:output_type -> qdrant.PointsOperationResponseInternal
	11,  // 109: qdrant.PointsInternal.SetPayload:output_type -> qdrant.PointsOperationResponseInternal
	11,  // 110: qdrant.PointsInternal.OverwritePayload:output_type -> qdrant.PointsOperationResponseInternal
	11,  // 111: qdrant.PointsInternal.DeletePayload:output_type -> qdrant.PointsOperationResponseInternal
	11,  // 112: qdrant.PointsInternal.ClearPayload:output_type -> qdrant.PointsOperationResponseInternal
	11,  // 113: qdrant.PointsInternal.CreateFieldIndex:output_type -> qdrant.PointsOperationResponseInternal
	11,  // 114: qdrant.PointsInternal.DeleteFieldIndex:output_type -> qdrant.PointsOperationResponseInternal
	75,  // 115: qdrant.PointsInternal.CoreSearchBatch:output_type -> qdrant.SearchBatchResponse
	76,  // 116: qdrant.PointsInternal.Scroll:output_type -> qdrant.ScrollResponse
	77,  // 117: qdrant.PointsInternal.Count:output_type -> qdrant.CountResponse
	78,  // 118: qdrant.PointsInternal.Recommend:output_type -> qdrant.RecommendResponse
	79,  // 119: qdrant.PointsInternal.Get:output_type -> qdrant.GetResponse
	33,  // 120: qdrant.PointsInternal.QueryBatch:output_type -> qdrant.QueryBatchResponseInternal
	37,  // 121: qdrant.PointsInternal.Facet:output_type -> qdrant.FacetResponseInternal
	104, // [104:122] is the sub-list for method output_type
	86,  // [86:104] is the sub-list for method input_type
	86,  // [86:86] is the sub-list for extension type_name
	86,  // [86:86] is the sub-list for extension extendee
	0,   // [0:86] is the sub-list for field type_name
}

func init() { file_points_internal_service_proto_init() }
func file_points_internal_service_proto_init() {
	if File_points_internal_service_proto != nil {
		return
	}
	file_points_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_points_internal_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SyncPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SyncPointsInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*UpsertPointsInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DeletePointsInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateVectorsInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteVectorsInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*SetPayloadPointsInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DeletePayloadPointsInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ClearPayloadPointsInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CreateFieldIndexCollectionInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteFieldIndexCollectionInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*PointsOperationResponseInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateResultInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ClockTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*SearchPointsInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*SearchBatchPointsInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*RecoQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ContextPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*DiscoveryQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*ContextQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*QueryEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CoreSearchPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CoreSearchBatchPointsInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ScrollPointsInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*RecommendPointsInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*GetPointsInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*CountPointsInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*RawVector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*RawQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*QueryShardPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*QueryBatchPointsInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*IntermediateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*QueryResultInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*QueryBatchResponseInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*FacetCountsInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*FacetValueInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*FacetHitInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*FacetResponseInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*RawQuery_Recommend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*RawQuery_RawContextPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*RawQuery_Discovery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*RawQuery_Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*QueryShardPoints_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_internal_service_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*QueryShardPoints_Prefetch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_points_internal_service_proto_msgTypes[0].OneofWrappers = []any{}
	file_points_internal_service_proto_msgTypes[1].OneofWrappers = []any{}
	file_points_internal_service_proto_msgTypes[2].OneofWrappers = []any{}
	file_points_internal_service_proto_msgTypes[3].OneofWrappers = []any{}
	file_points_internal_service_proto_msgTypes[4].OneofWrappers = []any{}
	file_points_internal_service_proto_msgTypes[5].OneofWrappers = []any{}
	file_points_internal_service_proto_msgTypes[6].OneofWrappers = []any{}
	file_points_internal_service_proto_msgTypes[7].OneofWrappers = []any{}
	file_points_internal_service_proto_msgTypes[8].OneofWrappers = []any{}
	file_points_internal_service_proto_msgTypes[9].OneofWrappers = []any{}
	file_points_internal_service_proto_msgTypes[10].OneofWrappers = []any{}
	file_points_internal_service_proto_msgTypes[12].OneofWrappers = []any{}
	file_points_internal_service_proto_msgTypes[14].OneofWrappers = []any{}
	file_points_internal_service_proto_msgTypes[15].OneofWrappers = []any{}
	file_points_internal_service_proto_msgTypes[20].OneofWrappers = []any{
		(*QueryEnum_NearestNeighbors)(nil),
		(*QueryEnum_RecommendBestScore)(nil),
		(*QueryEnum_Discover)(nil),
		(*QueryEnum_Context)(nil),
	}
	file_points_internal_service_proto_msgTypes[21].OneofWrappers = []any{}
	file_points_internal_service_proto_msgTypes[22].OneofWrappers = []any{}
	file_points_internal_service_proto_msgTypes[23].OneofWrappers = []any{}
	file_points_internal_service_proto_msgTypes[24].OneofWrappers = []any{}
	file_points_internal_service_proto_msgTypes[25].OneofWrappers = []any{}
	file_points_internal_service_proto_msgTypes[26].OneofWrappers = []any{}
	file_points_internal_service_proto_msgTypes[27].OneofWrappers = []any{
		(*RawVector_Dense)(nil),
		(*RawVector_Sparse)(nil),
		(*RawVector_MultiDense)(nil),
	}
	file_points_internal_service_proto_msgTypes[28].OneofWrappers = []any{
		(*RawQuery_Nearest)(nil),
		(*RawQuery_RecommendBestScore)(nil),
		(*RawQuery_Discover)(nil),
		(*RawQuery_Context_)(nil),
	}
	file_points_internal_service_proto_msgTypes[29].OneofWrappers = []any{}
	file_points_internal_service_proto_msgTypes[30].OneofWrappers = []any{}
	file_points_internal_service_proto_msgTypes[34].OneofWrappers = []any{}
	file_points_internal_service_proto_msgTypes[35].OneofWrappers = []any{
		(*FacetValueInternal_KeywordValue)(nil),
		(*FacetValueInternal_IntegerValue)(nil),
		(*FacetValueInternal_UuidValue)(nil),
	}
	file_points_internal_service_proto_msgTypes[42].OneofWrappers = []any{
		(*QueryShardPoints_Query_Vector)(nil),
		(*QueryShardPoints_Query_Fusion)(nil),
		(*QueryShardPoints_Query_OrderBy)(nil),
		(*QueryShardPoints_Query_Sample)(nil),
	}
	file_points_internal_service_proto_msgTypes[43].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_points_internal_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_points_internal_service_proto_goTypes,
		DependencyIndexes: file_points_internal_service_proto_depIdxs,
		MessageInfos:      file_points_internal_service_proto_msgTypes,
	}.Build()
	File_points_internal_service_proto = out.File
	file_points_internal_service_proto_rawDesc = nil
	file_points_internal_service_proto_goTypes = nil
	file_points_internal_service_proto_depIdxs = nil
}
