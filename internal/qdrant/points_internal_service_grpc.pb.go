// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: points_internal_service.proto

package qdrant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PointsInternal_Upsert_FullMethodName           = "/qdrant.PointsInternal/Upsert"
	PointsInternal_Sync_FullMethodName             = "/qdrant.PointsInternal/Sync"
	PointsInternal_Delete_FullMethodName           = "/qdrant.PointsInternal/Delete"
	PointsInternal_UpdateVectors_FullMethodName    = "/qdrant.PointsInternal/UpdateVectors"
	PointsInternal_DeleteVectors_FullMethodName    = "/qdrant.PointsInternal/DeleteVectors"
	PointsInternal_SetPayload_FullMethodName       = "/qdrant.PointsInternal/SetPayload"
	PointsInternal_OverwritePayload_FullMethodName = "/qdrant.PointsInternal/OverwritePayload"
	PointsInternal_DeletePayload_FullMethodName    = "/qdrant.PointsInternal/DeletePayload"
	PointsInternal_ClearPayload_FullMethodName     = "/qdrant.PointsInternal/ClearPayload"
	PointsInternal_CreateFieldIndex_FullMethodName = "/qdrant.PointsInternal/CreateFieldIndex"
	PointsInternal_DeleteFieldIndex_FullMethodName = "/qdrant.PointsInternal/DeleteFieldIndex"
	PointsInternal_CoreSearchBatch_FullMethodName  = "/qdrant.PointsInternal/CoreSearchBatch"
	PointsInternal_Scroll_FullMethodName           = "/qdrant.PointsInternal/Scroll"
	PointsInternal_Count_FullMethodName            = "/qdrant.PointsInternal/Count"
	PointsInternal_Recommend_FullMethodName        = "/qdrant.PointsInternal/Recommend"
	PointsInternal_Get_FullMethodName              = "/qdrant.PointsInternal/Get"
	PointsInternal_QueryBatch_FullMethodName       = "/qdrant.PointsInternal/QueryBatch"
	PointsInternal_Facet_FullMethodName            = "/qdrant.PointsInternal/Facet"
)

// PointsInternalClient is the client API for PointsInternal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PointsInternalClient interface {
	Upsert(ctx context.Context, in *UpsertPointsInternal, opts ...grpc.CallOption) (*PointsOperationResponseInternal, error)
	Sync(ctx context.Context, in *SyncPointsInternal, opts ...grpc.CallOption) (*PointsOperationResponseInternal, error)
	Delete(ctx context.Context, in *DeletePointsInternal, opts ...grpc.CallOption) (*PointsOperationResponseInternal, error)
	UpdateVectors(ctx context.Context, in *UpdateVectorsInternal, opts ...grpc.CallOption) (*PointsOperationResponseInternal, error)
	DeleteVectors(ctx context.Context, in *DeleteVectorsInternal, opts ...grpc.CallOption) (*PointsOperationResponseInternal, error)
	SetPayload(ctx context.Context, in *SetPayloadPointsInternal, opts ...grpc.CallOption) (*PointsOperationResponseInternal, error)
	OverwritePayload(ctx context.Context, in *SetPayloadPointsInternal, opts ...grpc.CallOption) (*PointsOperationResponseInternal, error)
	DeletePayload(ctx context.Context, in *DeletePayloadPointsInternal, opts ...grpc.CallOption) (*PointsOperationResponseInternal, error)
	ClearPayload(ctx context.Context, in *ClearPayloadPointsInternal, opts ...grpc.CallOption) (*PointsOperationResponseInternal, error)
	CreateFieldIndex(ctx context.Context, in *CreateFieldIndexCollectionInternal, opts ...grpc.CallOption) (*PointsOperationResponseInternal, error)
	DeleteFieldIndex(ctx context.Context, in *DeleteFieldIndexCollectionInternal, opts ...grpc.CallOption) (*PointsOperationResponseInternal, error)
	CoreSearchBatch(ctx context.Context, in *CoreSearchBatchPointsInternal, opts ...grpc.CallOption) (*SearchBatchResponse, error)
	Scroll(ctx context.Context, in *ScrollPointsInternal, opts ...grpc.CallOption) (*ScrollResponse, error)
	Count(ctx context.Context, in *CountPointsInternal, opts ...grpc.CallOption) (*CountResponse, error)
	Recommend(ctx context.Context, in *RecommendPointsInternal, opts ...grpc.CallOption) (*RecommendResponse, error)
	Get(ctx context.Context, in *GetPointsInternal, opts ...grpc.CallOption) (*GetResponse, error)
	QueryBatch(ctx context.Context, in *QueryBatchPointsInternal, opts ...grpc.CallOption) (*QueryBatchResponseInternal, error)
	Facet(ctx context.Context, in *FacetCountsInternal, opts ...grpc.CallOption) (*FacetResponseInternal, error)
}

type pointsInternalClient struct {
	cc grpc.ClientConnInterface
}

func NewPointsInternalClient(cc grpc.ClientConnInterface) PointsInternalClient {
	return &pointsInternalClient{cc}
}

func (c *pointsInternalClient) Upsert(ctx context.Context, in *UpsertPointsInternal, opts ...grpc.CallOption) (*PointsOperationResponseInternal, error) {
	out := new(PointsOperationResponseInternal)
	err := c.cc.Invoke(ctx, PointsInternal_Upsert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsInternalClient) Sync(ctx context.Context, in *SyncPointsInternal, opts ...grpc.CallOption) (*PointsOperationResponseInternal, error) {
	out := new(PointsOperationResponseInternal)
	err := c.cc.Invoke(ctx, PointsInternal_Sync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsInternalClient) Delete(ctx context.Context, in *DeletePointsInternal, opts ...grpc.CallOption) (*PointsOperationResponseInternal, error) {
	out := new(PointsOperationResponseInternal)
	err := c.cc.Invoke(ctx, PointsInternal_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsInternalClient) UpdateVectors(ctx context.Context, in *UpdateVectorsInternal, opts ...grpc.CallOption) (*PointsOperationResponseInternal, error) {
	out := new(PointsOperationResponseInternal)
	err := c.cc.Invoke(ctx, PointsInternal_UpdateVectors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsInternalClient) DeleteVectors(ctx context.Context, in *DeleteVectorsInternal, opts ...grpc.CallOption) (*PointsOperationResponseInternal, error) {
	out := new(PointsOperationResponseInternal)
	err := c.cc.Invoke(ctx, PointsInternal_DeleteVectors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsInternalClient) SetPayload(ctx context.Context, in *SetPayloadPointsInternal, opts ...grpc.CallOption) (*PointsOperationResponseInternal, error) {
	out := new(PointsOperationResponseInternal)
	err := c.cc.Invoke(ctx, PointsInternal_SetPayload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsInternalClient) OverwritePayload(ctx context.Context, in *SetPayloadPointsInternal, opts ...grpc.CallOption) (*PointsOperationResponseInternal, error) {
	out := new(PointsOperationResponseInternal)
	err := c.cc.Invoke(ctx, PointsInternal_OverwritePayload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsInternalClient) DeletePayload(ctx context.Context, in *DeletePayloadPointsInternal, opts ...grpc.CallOption) (*PointsOperationResponseInternal, error) {
	out := new(PointsOperationResponseInternal)
	err := c.cc.Invoke(ctx, PointsInternal_DeletePayload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsInternalClient) ClearPayload(ctx context.Context, in *ClearPayloadPointsInternal, opts ...grpc.CallOption) (*PointsOperationResponseInternal, error) {
	out := new(PointsOperationResponseInternal)
	err := c.cc.Invoke(ctx, PointsInternal_ClearPayload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsInternalClient) CreateFieldIndex(ctx context.Context, in *CreateFieldIndexCollectionInternal, opts ...grpc.CallOption) (*PointsOperationResponseInternal, error) {
	out := new(PointsOperationResponseInternal)
	err := c.cc.Invoke(ctx, PointsInternal_CreateFieldIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsInternalClient) DeleteFieldIndex(ctx context.Context, in *DeleteFieldIndexCollectionInternal, opts ...grpc.CallOption) (*PointsOperationResponseInternal, error) {
	out := new(PointsOperationResponseInternal)
	err := c.cc.Invoke(ctx, PointsInternal_DeleteFieldIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsInternalClient) CoreSearchBatch(ctx context.Context, in *CoreSearchBatchPointsInternal, opts ...grpc.CallOption) (*SearchBatchResponse, error) {
	out := new(SearchBatchResponse)
	err := c.cc.Invoke(ctx, PointsInternal_CoreSearchBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsInternalClient) Scroll(ctx context.Context, in *ScrollPointsInternal, opts ...grpc.CallOption) (*ScrollResponse, error) {
	out := new(ScrollResponse)
	err := c.cc.Invoke(ctx, PointsInternal_Scroll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsInternalClient) Count(ctx context.Context, in *CountPointsInternal, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, PointsInternal_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsInternalClient) Recommend(ctx context.Context, in *RecommendPointsInternal, opts ...grpc.CallOption) (*RecommendResponse, error) {
	out := new(RecommendResponse)
	err := c.cc.Invoke(ctx, PointsInternal_Recommend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsInternalClient) Get(ctx context.Context, in *GetPointsInternal, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, PointsInternal_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsInternalClient) QueryBatch(ctx context.Context, in *QueryBatchPointsInternal, opts ...grpc.CallOption) (*QueryBatchResponseInternal, error) {
	out := new(QueryBatchResponseInternal)
	err := c.cc.Invoke(ctx, PointsInternal_QueryBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsInternalClient) Facet(ctx context.Context, in *FacetCountsInternal, opts ...grpc.CallOption) (*FacetResponseInternal, error) {
	out := new(FacetResponseInternal)
	err := c.cc.Invoke(ctx, PointsInternal_Facet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PointsInternalServer is the server API for PointsInternal service.
// All implementations must embed UnimplementedPointsInternalServer
// for forward compatibility
type PointsInternalServer interface {
	Upsert(context.Context, *UpsertPointsInternal) (*PointsOperationResponseInternal, error)
	Sync(context.Context, *SyncPointsInternal) (*PointsOperationResponseInternal, error)
	Delete(context.Context, *DeletePointsInternal) (*PointsOperationResponseInternal, error)
	UpdateVectors(context.Context, *UpdateVectorsInternal) (*PointsOperationResponseInternal, error)
	DeleteVectors(context.Context, *DeleteVectorsInternal) (*PointsOperationResponseInternal, error)
	SetPayload(context.Context, *SetPayloadPointsInternal) (*PointsOperationResponseInternal, error)
	OverwritePayload(context.Context, *SetPayloadPointsInternal) (*PointsOperationResponseInternal, error)
	DeletePayload(context.Context, *DeletePayloadPointsInternal) (*PointsOperationResponseInternal, error)
	ClearPayload(context.Context, *ClearPayloadPointsInternal) (*PointsOperationResponseInternal, error)
	CreateFieldIndex(context.Context, *CreateFieldIndexCollectionInternal) (*PointsOperationResponseInternal, error)
	DeleteFieldIndex(context.Context, *DeleteFieldIndexCollectionInternal) (*PointsOperationResponseInternal, error)
	CoreSearchBatch(context.Context, *CoreSearchBatchPointsInternal) (*SearchBatchResponse, error)
	Scroll(context.Context, *ScrollPointsInternal) (*ScrollResponse, error)
	Count(context.Context, *CountPointsInternal) (*CountResponse, error)
	Recommend(context.Context, *RecommendPointsInternal) (*RecommendResponse, error)
	Get(context.Context, *GetPointsInternal) (*GetResponse, error)
	QueryBatch(context.Context, *QueryBatchPointsInternal) (*QueryBatchResponseInternal, error)
	Facet(context.Context, *FacetCountsInternal) (*FacetResponseInternal, error)
	mustEmbedUnimplementedPointsInternalServer()
}

// UnimplementedPointsInternalServer must be embedded to have forward compatible implementations.
type UnimplementedPointsInternalServer struct {
}

func (UnimplementedPointsInternalServer) Upsert(context.Context, *UpsertPointsInternal) (*PointsOperationResponseInternal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedPointsInternalServer) Sync(context.Context, *SyncPointsInternal) (*PointsOperationResponseInternal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedPointsInternalServer) Delete(context.Context, *DeletePointsInternal) (*PointsOperationResponseInternal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPointsInternalServer) UpdateVectors(context.Context, *UpdateVectorsInternal) (*PointsOperationResponseInternal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVectors not implemented")
}
func (UnimplementedPointsInternalServer) DeleteVectors(context.Context, *DeleteVectorsInternal) (*PointsOperationResponseInternal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVectors not implemented")
}
func (UnimplementedPointsInternalServer) SetPayload(context.Context, *SetPayloadPointsInternal) (*PointsOperationResponseInternal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPayload not implemented")
}
func (UnimplementedPointsInternalServer) OverwritePayload(context.Context, *SetPayloadPointsInternal) (*PointsOperationResponseInternal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverwritePayload not implemented")
}
func (UnimplementedPointsInternalServer) DeletePayload(context.Context, *DeletePayloadPointsInternal) (*PointsOperationResponseInternal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePayload not implemented")
}
func (UnimplementedPointsInternalServer) ClearPayload(context.Context, *ClearPayloadPointsInternal) (*PointsOperationResponseInternal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearPayload not implemented")
}
func (UnimplementedPointsInternalServer) CreateFieldIndex(context.Context, *CreateFieldIndexCollectionInternal) (*PointsOperationResponseInternal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFieldIndex not implemented")
}
func (UnimplementedPointsInternalServer) DeleteFieldIndex(context.Context, *DeleteFieldIndexCollectionInternal) (*PointsOperationResponseInternal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFieldIndex not implemented")
}
func (UnimplementedPointsInternalServer) CoreSearchBatch(context.Context, *CoreSearchBatchPointsInternal) (*SearchBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoreSearchBatch not implemented")
}
func (UnimplementedPointsInternalServer) Scroll(context.Context, *ScrollPointsInternal) (*ScrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scroll not implemented")
}
func (UnimplementedPointsInternalServer) Count(context.Context, *CountPointsInternal) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedPointsInternalServer) Recommend(context.Context, *RecommendPointsInternal) (*RecommendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recommend not implemented")
}
func (UnimplementedPointsInternalServer) Get(context.Context, *GetPointsInternal) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPointsInternalServer) QueryBatch(context.Context, *QueryBatchPointsInternal) (*QueryBatchResponseInternal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBatch not implemented")
}
func (UnimplementedPointsInternalServer) Facet(context.Context, *FacetCountsInternal) (*FacetResponseInternal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Facet not implemented")
}
func (UnimplementedPointsInternalServer) mustEmbedUnimplementedPointsInternalServer() {}

// UnsafePointsInternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PointsInternalServer will
// result in compilation errors.
type UnsafePointsInternalServer interface {
	mustEmbedUnimplementedPointsInternalServer()
}

func RegisterPointsInternalServer(s grpc.ServiceRegistrar, srv PointsInternalServer) {
	s.RegisterService(&PointsInternal_ServiceDesc, srv)
}

func _PointsInternal_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertPointsInternal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsInternalServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PointsInternal_Upsert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsInternalServer).Upsert(ctx, req.(*UpsertPointsInternal))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointsInternal_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncPointsInternal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsInternalServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PointsInternal_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsInternalServer).Sync(ctx, req.(*SyncPointsInternal))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointsInternal_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePointsInternal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsInternalServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PointsInternal_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsInternalServer).Delete(ctx, req.(*DeletePointsInternal))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointsInternal_UpdateVectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVectorsInternal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsInternalServer).UpdateVectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PointsInternal_UpdateVectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsInternalServer).UpdateVectors(ctx, req.(*UpdateVectorsInternal))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointsInternal_DeleteVectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVectorsInternal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsInternalServer).DeleteVectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PointsInternal_DeleteVectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsInternalServer).DeleteVectors(ctx, req.(*DeleteVectorsInternal))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointsInternal_SetPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPayloadPointsInternal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsInternalServer).SetPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PointsInternal_SetPayload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsInternalServer).SetPayload(ctx, req.(*SetPayloadPointsInternal))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointsInternal_OverwritePayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPayloadPointsInternal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsInternalServer).OverwritePayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PointsInternal_OverwritePayload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsInternalServer).OverwritePayload(ctx, req.(*SetPayloadPointsInternal))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointsInternal_DeletePayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePayloadPointsInternal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsInternalServer).DeletePayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PointsInternal_DeletePayload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsInternalServer).DeletePayload(ctx, req.(*DeletePayloadPointsInternal))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointsInternal_ClearPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearPayloadPointsInternal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsInternalServer).ClearPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PointsInternal_ClearPayload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsInternalServer).ClearPayload(ctx, req.(*ClearPayloadPointsInternal))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointsInternal_CreateFieldIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFieldIndexCollectionInternal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsInternalServer).CreateFieldIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PointsInternal_CreateFieldIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsInternalServer).CreateFieldIndex(ctx, req.(*CreateFieldIndexCollectionInternal))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointsInternal_DeleteFieldIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFieldIndexCollectionInternal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsInternalServer).DeleteFieldIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PointsInternal_DeleteFieldIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsInternalServer).DeleteFieldIndex(ctx, req.(*DeleteFieldIndexCollectionInternal))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointsInternal_CoreSearchBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreSearchBatchPointsInternal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsInternalServer).CoreSearchBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PointsInternal_CoreSearchBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsInternalServer).CoreSearchBatch(ctx, req.(*CoreSearchBatchPointsInternal))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointsInternal_Scroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrollPointsInternal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsInternalServer).Scroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PointsInternal_Scroll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsInternalServer).Scroll(ctx, req.(*ScrollPointsInternal))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointsInternal_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountPointsInternal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsInternalServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PointsInternal_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsInternalServer).Count(ctx, req.(*CountPointsInternal))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointsInternal_Recommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendPointsInternal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsInternalServer).Recommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PointsInternal_Recommend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsInternalServer).Recommend(ctx, req.(*RecommendPointsInternal))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointsInternal_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPointsInternal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsInternalServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PointsInternal_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsInternalServer).Get(ctx, req.(*GetPointsInternal))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointsInternal_QueryBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBatchPointsInternal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsInternalServer).QueryBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PointsInternal_QueryBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsInternalServer).QueryBatch(ctx, req.(*QueryBatchPointsInternal))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointsInternal_Facet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FacetCountsInternal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsInternalServer).Facet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PointsInternal_Facet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsInternalServer).Facet(ctx, req.(*FacetCountsInternal))
	}
	return interceptor(ctx, in, info, handler)
}

// PointsInternal_ServiceDesc is the grpc.ServiceDesc for PointsInternal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PointsInternal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qdrant.PointsInternal",
	HandlerType: (*PointsInternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upsert",
			Handler:    _PointsInternal_Upsert_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _PointsInternal_Sync_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PointsInternal_Delete_Handler,
		},
		{
			MethodName: "UpdateVectors",
			Handler:    _PointsInternal_UpdateVectors_Handler,
		},
		{
			MethodName: "DeleteVectors",
			Handler:    _PointsInternal_DeleteVectors_Handler,
		},
		{
			MethodName: "SetPayload",
			Handler:    _PointsInternal_SetPayload_Handler,
		},
		{
			MethodName: "OverwritePayload",
			Handler:    _PointsInternal_OverwritePayload_Handler,
		},
		{
			MethodName: "DeletePayload",
			Handler:    _PointsInternal_DeletePayload_Handler,
		},
		{
			MethodName: "ClearPayload",
			Handler:    _PointsInternal_ClearPayload_Handler,
		},
		{
			MethodName: "CreateFieldIndex",
			Handler:    _PointsInternal_CreateFieldIndex_Handler,
		},
		{
			MethodName: "DeleteFieldIndex",
			Handler:    _PointsInternal_DeleteFieldIndex_Handler,
		},
		{
			MethodName: "CoreSearchBatch",
			Handler:    _PointsInternal_CoreSearchBatch_Handler,
		},
		{
			MethodName: "Scroll",
			Handler:    _PointsInternal_Scroll_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _PointsInternal_Count_Handler,
		},
		{
			MethodName: "Recommend",
			Handler:    _PointsInternal_Recommend_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PointsInternal_Get_Handler,
		},
		{
			MethodName: "QueryBatch",
			Handler:    _PointsInternal_QueryBatch_Handler,
		},
		{
			MethodName: "Facet",
			Handler:    _PointsInternal_Facet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "points_internal_service.proto",
}
