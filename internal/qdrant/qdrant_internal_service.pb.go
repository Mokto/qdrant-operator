// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: qdrant_internal_service.proto

package qdrant

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetConsensusCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetConsensusCommitRequest) Reset() {
	*x = GetConsensusCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qdrant_internal_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsensusCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsensusCommitRequest) ProtoMessage() {}

func (x *GetConsensusCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_internal_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsensusCommitRequest.ProtoReflect.Descriptor instead.
func (*GetConsensusCommitRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_internal_service_proto_rawDescGZIP(), []int{0}
}

type GetConsensusCommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit int64 `protobuf:"varint,1,opt,name=commit,proto3" json:"commit,omitempty"` // Raft commit as u64
	Term   int64 `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`     // Raft term as u64
}

func (x *GetConsensusCommitResponse) Reset() {
	*x = GetConsensusCommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qdrant_internal_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsensusCommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsensusCommitResponse) ProtoMessage() {}

func (x *GetConsensusCommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_internal_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsensusCommitResponse.ProtoReflect.Descriptor instead.
func (*GetConsensusCommitResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_internal_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetConsensusCommitResponse) GetCommit() int64 {
	if x != nil {
		return x.Commit
	}
	return 0
}

func (x *GetConsensusCommitResponse) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

type WaitOnConsensusCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit  int64 `protobuf:"varint,1,opt,name=commit,proto3" json:"commit,omitempty"`   // Raft commit as u64
	Term    int64 `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`       // Raft term as u64
	Timeout int64 `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"` // Timeout in seconds
}

func (x *WaitOnConsensusCommitRequest) Reset() {
	*x = WaitOnConsensusCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qdrant_internal_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitOnConsensusCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitOnConsensusCommitRequest) ProtoMessage() {}

func (x *WaitOnConsensusCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_internal_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitOnConsensusCommitRequest.ProtoReflect.Descriptor instead.
func (*WaitOnConsensusCommitRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_internal_service_proto_rawDescGZIP(), []int{2}
}

func (x *WaitOnConsensusCommitRequest) GetCommit() int64 {
	if x != nil {
		return x.Commit
	}
	return 0
}

func (x *WaitOnConsensusCommitRequest) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *WaitOnConsensusCommitRequest) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type WaitOnConsensusCommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"` // False if commit/term is diverged and never reached or if timed out.
}

func (x *WaitOnConsensusCommitResponse) Reset() {
	*x = WaitOnConsensusCommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qdrant_internal_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitOnConsensusCommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitOnConsensusCommitResponse) ProtoMessage() {}

func (x *WaitOnConsensusCommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_internal_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitOnConsensusCommitResponse.ProtoReflect.Descriptor instead.
func (*WaitOnConsensusCommitResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_internal_service_proto_rawDescGZIP(), []int{3}
}

func (x *WaitOnConsensusCommitResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

var File_qdrant_internal_service_proto protoreflect.FileDescriptor

var file_qdrant_internal_service_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x22, 0x64,
	0x0a, 0x1c, 0x57, 0x61, 0x69, 0x74, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x22, 0x2f, 0x0a, 0x1d, 0x57, 0x61, 0x69, 0x74, 0x4f, 0x6e, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x02, 0x6f, 0x6b, 0x32, 0xd7, 0x01, 0x0a, 0x0e, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x5d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x21,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x15, 0x57, 0x61, 0x69, 0x74, 0x4f,
	0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x12, 0x24, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x4f, 0x6e,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x57, 0x61, 0x69, 0x74, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x71, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x42, 0x1a, 0x51,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x0f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0xa2, 0x02, 0x03, 0x51,
	0x58, 0x58, 0xaa, 0x02, 0x06, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0xca, 0x02, 0x06, 0x51, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0xe2, 0x02, 0x12, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x06, 0x51, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_qdrant_internal_service_proto_rawDescOnce sync.Once
	file_qdrant_internal_service_proto_rawDescData = file_qdrant_internal_service_proto_rawDesc
)

func file_qdrant_internal_service_proto_rawDescGZIP() []byte {
	file_qdrant_internal_service_proto_rawDescOnce.Do(func() {
		file_qdrant_internal_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_qdrant_internal_service_proto_rawDescData)
	})
	return file_qdrant_internal_service_proto_rawDescData
}

var file_qdrant_internal_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_qdrant_internal_service_proto_goTypes = []any{
	(*GetConsensusCommitRequest)(nil),     // 0: qdrant.GetConsensusCommitRequest
	(*GetConsensusCommitResponse)(nil),    // 1: qdrant.GetConsensusCommitResponse
	(*WaitOnConsensusCommitRequest)(nil),  // 2: qdrant.WaitOnConsensusCommitRequest
	(*WaitOnConsensusCommitResponse)(nil), // 3: qdrant.WaitOnConsensusCommitResponse
}
var file_qdrant_internal_service_proto_depIdxs = []int32{
	0, // 0: qdrant.QdrantInternal.GetConsensusCommit:input_type -> qdrant.GetConsensusCommitRequest
	2, // 1: qdrant.QdrantInternal.WaitOnConsensusCommit:input_type -> qdrant.WaitOnConsensusCommitRequest
	1, // 2: qdrant.QdrantInternal.GetConsensusCommit:output_type -> qdrant.GetConsensusCommitResponse
	3, // 3: qdrant.QdrantInternal.WaitOnConsensusCommit:output_type -> qdrant.WaitOnConsensusCommitResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_qdrant_internal_service_proto_init() }
func file_qdrant_internal_service_proto_init() {
	if File_qdrant_internal_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_qdrant_internal_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetConsensusCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qdrant_internal_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetConsensusCommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qdrant_internal_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*WaitOnConsensusCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qdrant_internal_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*WaitOnConsensusCommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_qdrant_internal_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_qdrant_internal_service_proto_goTypes,
		DependencyIndexes: file_qdrant_internal_service_proto_depIdxs,
		MessageInfos:      file_qdrant_internal_service_proto_msgTypes,
	}.Build()
	File_qdrant_internal_service_proto = out.File
	file_qdrant_internal_service_proto_rawDesc = nil
	file_qdrant_internal_service_proto_goTypes = nil
	file_qdrant_internal_service_proto_depIdxs = nil
}
