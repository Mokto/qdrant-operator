// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: qdrant_internal_service.proto

package qdrant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QdrantInternal_GetConsensusCommit_FullMethodName    = "/qdrant.QdrantInternal/GetConsensusCommit"
	QdrantInternal_WaitOnConsensusCommit_FullMethodName = "/qdrant.QdrantInternal/WaitOnConsensusCommit"
)

// QdrantInternalClient is the client API for QdrantInternal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QdrantInternalClient interface {
	// Get current commit and term on the target node.
	GetConsensusCommit(ctx context.Context, in *GetConsensusCommitRequest, opts ...grpc.CallOption) (*GetConsensusCommitResponse, error)
	// Wait until the target node reached the given commit ID.
	WaitOnConsensusCommit(ctx context.Context, in *WaitOnConsensusCommitRequest, opts ...grpc.CallOption) (*WaitOnConsensusCommitResponse, error)
}

type qdrantInternalClient struct {
	cc grpc.ClientConnInterface
}

func NewQdrantInternalClient(cc grpc.ClientConnInterface) QdrantInternalClient {
	return &qdrantInternalClient{cc}
}

func (c *qdrantInternalClient) GetConsensusCommit(ctx context.Context, in *GetConsensusCommitRequest, opts ...grpc.CallOption) (*GetConsensusCommitResponse, error) {
	out := new(GetConsensusCommitResponse)
	err := c.cc.Invoke(ctx, QdrantInternal_GetConsensusCommit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qdrantInternalClient) WaitOnConsensusCommit(ctx context.Context, in *WaitOnConsensusCommitRequest, opts ...grpc.CallOption) (*WaitOnConsensusCommitResponse, error) {
	out := new(WaitOnConsensusCommitResponse)
	err := c.cc.Invoke(ctx, QdrantInternal_WaitOnConsensusCommit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QdrantInternalServer is the server API for QdrantInternal service.
// All implementations must embed UnimplementedQdrantInternalServer
// for forward compatibility
type QdrantInternalServer interface {
	// Get current commit and term on the target node.
	GetConsensusCommit(context.Context, *GetConsensusCommitRequest) (*GetConsensusCommitResponse, error)
	// Wait until the target node reached the given commit ID.
	WaitOnConsensusCommit(context.Context, *WaitOnConsensusCommitRequest) (*WaitOnConsensusCommitResponse, error)
	mustEmbedUnimplementedQdrantInternalServer()
}

// UnimplementedQdrantInternalServer must be embedded to have forward compatible implementations.
type UnimplementedQdrantInternalServer struct {
}

func (UnimplementedQdrantInternalServer) GetConsensusCommit(context.Context, *GetConsensusCommitRequest) (*GetConsensusCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsensusCommit not implemented")
}
func (UnimplementedQdrantInternalServer) WaitOnConsensusCommit(context.Context, *WaitOnConsensusCommitRequest) (*WaitOnConsensusCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitOnConsensusCommit not implemented")
}
func (UnimplementedQdrantInternalServer) mustEmbedUnimplementedQdrantInternalServer() {}

// UnsafeQdrantInternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QdrantInternalServer will
// result in compilation errors.
type UnsafeQdrantInternalServer interface {
	mustEmbedUnimplementedQdrantInternalServer()
}

func RegisterQdrantInternalServer(s grpc.ServiceRegistrar, srv QdrantInternalServer) {
	s.RegisterService(&QdrantInternal_ServiceDesc, srv)
}

func _QdrantInternal_GetConsensusCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsensusCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QdrantInternalServer).GetConsensusCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QdrantInternal_GetConsensusCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QdrantInternalServer).GetConsensusCommit(ctx, req.(*GetConsensusCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QdrantInternal_WaitOnConsensusCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitOnConsensusCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QdrantInternalServer).WaitOnConsensusCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QdrantInternal_WaitOnConsensusCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QdrantInternalServer).WaitOnConsensusCommit(ctx, req.(*WaitOnConsensusCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QdrantInternal_ServiceDesc is the grpc.ServiceDesc for QdrantInternal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QdrantInternal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qdrant.QdrantInternal",
	HandlerType: (*QdrantInternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConsensusCommit",
			Handler:    _QdrantInternal_GetConsensusCommit_Handler,
		},
		{
			MethodName: "WaitOnConsensusCommit",
			Handler:    _QdrantInternal_WaitOnConsensusCommit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qdrant_internal_service.proto",
}
