// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: collections_internal_service.proto

package qdrant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CollectionsInternal_Get_FullMethodName                    = "/qdrant.CollectionsInternal/Get"
	CollectionsInternal_Initiate_FullMethodName               = "/qdrant.CollectionsInternal/Initiate"
	CollectionsInternal_WaitForShardState_FullMethodName      = "/qdrant.CollectionsInternal/WaitForShardState"
	CollectionsInternal_GetShardRecoveryPoint_FullMethodName  = "/qdrant.CollectionsInternal/GetShardRecoveryPoint"
	CollectionsInternal_UpdateShardCutoffPoint_FullMethodName = "/qdrant.CollectionsInternal/UpdateShardCutoffPoint"
)

// CollectionsInternalClient is the client API for CollectionsInternal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectionsInternalClient interface {
	// Get collection info
	Get(ctx context.Context, in *GetCollectionInfoRequestInternal, opts ...grpc.CallOption) (*GetCollectionInfoResponse, error)
	// Initiate shard transfer
	Initiate(ctx context.Context, in *InitiateShardTransferRequest, opts ...grpc.CallOption) (*CollectionOperationResponse, error)
	// *
	// Wait for a shard to get into the given state
	WaitForShardState(ctx context.Context, in *WaitForShardStateRequest, opts ...grpc.CallOption) (*CollectionOperationResponse, error)
	// Get shard recovery point
	GetShardRecoveryPoint(ctx context.Context, in *GetShardRecoveryPointRequest, opts ...grpc.CallOption) (*GetShardRecoveryPointResponse, error)
	// Update shard cutoff point
	UpdateShardCutoffPoint(ctx context.Context, in *UpdateShardCutoffPointRequest, opts ...grpc.CallOption) (*CollectionOperationResponse, error)
}

type collectionsInternalClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionsInternalClient(cc grpc.ClientConnInterface) CollectionsInternalClient {
	return &collectionsInternalClient{cc}
}

func (c *collectionsInternalClient) Get(ctx context.Context, in *GetCollectionInfoRequestInternal, opts ...grpc.CallOption) (*GetCollectionInfoResponse, error) {
	out := new(GetCollectionInfoResponse)
	err := c.cc.Invoke(ctx, CollectionsInternal_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsInternalClient) Initiate(ctx context.Context, in *InitiateShardTransferRequest, opts ...grpc.CallOption) (*CollectionOperationResponse, error) {
	out := new(CollectionOperationResponse)
	err := c.cc.Invoke(ctx, CollectionsInternal_Initiate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsInternalClient) WaitForShardState(ctx context.Context, in *WaitForShardStateRequest, opts ...grpc.CallOption) (*CollectionOperationResponse, error) {
	out := new(CollectionOperationResponse)
	err := c.cc.Invoke(ctx, CollectionsInternal_WaitForShardState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsInternalClient) GetShardRecoveryPoint(ctx context.Context, in *GetShardRecoveryPointRequest, opts ...grpc.CallOption) (*GetShardRecoveryPointResponse, error) {
	out := new(GetShardRecoveryPointResponse)
	err := c.cc.Invoke(ctx, CollectionsInternal_GetShardRecoveryPoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsInternalClient) UpdateShardCutoffPoint(ctx context.Context, in *UpdateShardCutoffPointRequest, opts ...grpc.CallOption) (*CollectionOperationResponse, error) {
	out := new(CollectionOperationResponse)
	err := c.cc.Invoke(ctx, CollectionsInternal_UpdateShardCutoffPoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectionsInternalServer is the server API for CollectionsInternal service.
// All implementations must embed UnimplementedCollectionsInternalServer
// for forward compatibility
type CollectionsInternalServer interface {
	// Get collection info
	Get(context.Context, *GetCollectionInfoRequestInternal) (*GetCollectionInfoResponse, error)
	// Initiate shard transfer
	Initiate(context.Context, *InitiateShardTransferRequest) (*CollectionOperationResponse, error)
	// *
	// Wait for a shard to get into the given state
	WaitForShardState(context.Context, *WaitForShardStateRequest) (*CollectionOperationResponse, error)
	// Get shard recovery point
	GetShardRecoveryPoint(context.Context, *GetShardRecoveryPointRequest) (*GetShardRecoveryPointResponse, error)
	// Update shard cutoff point
	UpdateShardCutoffPoint(context.Context, *UpdateShardCutoffPointRequest) (*CollectionOperationResponse, error)
	mustEmbedUnimplementedCollectionsInternalServer()
}

// UnimplementedCollectionsInternalServer must be embedded to have forward compatible implementations.
type UnimplementedCollectionsInternalServer struct {
}

func (UnimplementedCollectionsInternalServer) Get(context.Context, *GetCollectionInfoRequestInternal) (*GetCollectionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCollectionsInternalServer) Initiate(context.Context, *InitiateShardTransferRequest) (*CollectionOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initiate not implemented")
}
func (UnimplementedCollectionsInternalServer) WaitForShardState(context.Context, *WaitForShardStateRequest) (*CollectionOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForShardState not implemented")
}
func (UnimplementedCollectionsInternalServer) GetShardRecoveryPoint(context.Context, *GetShardRecoveryPointRequest) (*GetShardRecoveryPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShardRecoveryPoint not implemented")
}
func (UnimplementedCollectionsInternalServer) UpdateShardCutoffPoint(context.Context, *UpdateShardCutoffPointRequest) (*CollectionOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShardCutoffPoint not implemented")
}
func (UnimplementedCollectionsInternalServer) mustEmbedUnimplementedCollectionsInternalServer() {}

// UnsafeCollectionsInternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectionsInternalServer will
// result in compilation errors.
type UnsafeCollectionsInternalServer interface {
	mustEmbedUnimplementedCollectionsInternalServer()
}

func RegisterCollectionsInternalServer(s grpc.ServiceRegistrar, srv CollectionsInternalServer) {
	s.RegisterService(&CollectionsInternal_ServiceDesc, srv)
}

func _CollectionsInternal_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionInfoRequestInternal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsInternalServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionsInternal_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsInternalServer).Get(ctx, req.(*GetCollectionInfoRequestInternal))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionsInternal_Initiate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateShardTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsInternalServer).Initiate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionsInternal_Initiate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsInternalServer).Initiate(ctx, req.(*InitiateShardTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionsInternal_WaitForShardState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForShardStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsInternalServer).WaitForShardState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionsInternal_WaitForShardState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsInternalServer).WaitForShardState(ctx, req.(*WaitForShardStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionsInternal_GetShardRecoveryPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShardRecoveryPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsInternalServer).GetShardRecoveryPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionsInternal_GetShardRecoveryPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsInternalServer).GetShardRecoveryPoint(ctx, req.(*GetShardRecoveryPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionsInternal_UpdateShardCutoffPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShardCutoffPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsInternalServer).UpdateShardCutoffPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionsInternal_UpdateShardCutoffPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsInternalServer).UpdateShardCutoffPoint(ctx, req.(*UpdateShardCutoffPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectionsInternal_ServiceDesc is the grpc.ServiceDesc for CollectionsInternal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectionsInternal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qdrant.CollectionsInternal",
	HandlerType: (*CollectionsInternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _CollectionsInternal_Get_Handler,
		},
		{
			MethodName: "Initiate",
			Handler:    _CollectionsInternal_Initiate_Handler,
		},
		{
			MethodName: "WaitForShardState",
			Handler:    _CollectionsInternal_WaitForShardState_Handler,
		},
		{
			MethodName: "GetShardRecoveryPoint",
			Handler:    _CollectionsInternal_GetShardRecoveryPoint_Handler,
		},
		{
			MethodName: "UpdateShardCutoffPoint",
			Handler:    _CollectionsInternal_UpdateShardCutoffPoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collections_internal_service.proto",
}
